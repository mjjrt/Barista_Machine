
Barista_Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d70  08003d70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d78  08003d78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d78  08003d78  00013d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  08003df0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08003df0  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c39d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001928  00000000  00000000  0002c43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0002dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017990  00000000  00000000  0002f3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9b1  00000000  00000000  00046d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099a71  00000000  00000000  000536e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed152  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f0  00000000  00000000  000ed1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c20 	.word	0x08003c20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003c20 	.word	0x08003c20

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <set_global_state>:
	}
}
*/

void set_global_state(STATE s)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	global_state = s;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <set_global_state+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
	transmit_state(s, buffer);
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <set_global_state+0x28>)
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f893 	bl	80006d4 <transmit_state>
	return;
 80005ae:	bf00      	nop
}
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000160 	.word	0x20000160
 80005bc:	20000164 	.word	0x20000164

080005c0 <ADC_Select_CH14>:

void ADC_Select_CH14()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_14;
 80005d2:	230e      	movs	r3, #14
 80005d4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	4619      	mov	r1, r3
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <ADC_Select_CH14+0x3c>)
 80005e4:	f000 ffc4 	bl	8001570 <HAL_ADC_ConfigChannel>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <ADC_Select_CH14+0x32>
	{
	  Error_Handler();
 80005ee:	f000 fbe5 	bl	8000dbc <Error_Handler>
	}
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	2000008c 	.word	0x2000008c

08000600 <ADC_Select_CH15>:

void ADC_Select_CH15()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_15;
 8000612:	230f      	movs	r3, #15
 8000614:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	4619      	mov	r1, r3
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <ADC_Select_CH15+0x3c>)
 8000624:	f000 ffa4 	bl	8001570 <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <ADC_Select_CH15+0x32>
	{
	  Error_Handler();
 800062e:	f000 fbc5 	bl	8000dbc <Error_Handler>
	}
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000008c 	.word	0x2000008c

08000640 <get_analog_state>:


uint16_t get_analog_state(ADC_Pin adc)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	81fb      	strh	r3, [r7, #14]

	switch(adc){
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b0e      	cmp	r3, #14
 8000652:	d002      	beq.n	800065a <get_analog_state+0x1a>
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d013      	beq.n	8000680 <get_analog_state+0x40>

			HAL_ADC_Stop(&hadc1);
			break;

		default:
			break;
 8000658:	e025      	b.n	80006a6 <get_analog_state+0x66>
			ADC_Select_CH14();
 800065a:	f7ff ffb1 	bl	80005c0 <ADC_Select_CH14>
			HAL_ADC_Start(&hadc1);
 800065e:	4814      	ldr	r0, [pc, #80]	; (80006b0 <get_analog_state+0x70>)
 8000660:	f000 fe06 	bl	8001270 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 8000664:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000668:	4811      	ldr	r0, [pc, #68]	; (80006b0 <get_analog_state+0x70>)
 800066a:	f000 fee8 	bl	800143e <HAL_ADC_PollForConversion>
			value = HAL_ADC_GetValue(&hadc1);
 800066e:	4810      	ldr	r0, [pc, #64]	; (80006b0 <get_analog_state+0x70>)
 8000670:	f000 ff70 	bl	8001554 <HAL_ADC_GetValue>
 8000674:	4603      	mov	r3, r0
 8000676:	81fb      	strh	r3, [r7, #14]
			HAL_ADC_Stop(&hadc1);
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <get_analog_state+0x70>)
 800067a:	f000 fead 	bl	80013d8 <HAL_ADC_Stop>
			break;
 800067e:	e012      	b.n	80006a6 <get_analog_state+0x66>
			ADC_Select_CH15();
 8000680:	f7ff ffbe 	bl	8000600 <ADC_Select_CH15>
			HAL_ADC_Start(&hadc1);
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <get_analog_state+0x70>)
 8000686:	f000 fdf3 	bl	8001270 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 800068a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <get_analog_state+0x70>)
 8000690:	f000 fed5 	bl	800143e <HAL_ADC_PollForConversion>
			value = HAL_ADC_GetValue(&hadc1);
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <get_analog_state+0x70>)
 8000696:	f000 ff5d 	bl	8001554 <HAL_ADC_GetValue>
 800069a:	4603      	mov	r3, r0
 800069c:	81fb      	strh	r3, [r7, #14]
			HAL_ADC_Stop(&hadc1);
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <get_analog_state+0x70>)
 80006a0:	f000 fe9a 	bl	80013d8 <HAL_ADC_Stop>
			break;
 80006a4:	bf00      	nop
	}

	return value;
 80006a6:	89fb      	ldrh	r3, [r7, #14]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000008c 	.word	0x2000008c

080006b4 <get_temp>:


uint16_t get_temp()
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	return get_analog_state(TEMP);
 80006b8:	200e      	movs	r0, #14
 80006ba:	f7ff ffc1 	bl	8000640 <get_analog_state>
 80006be:	4603      	mov	r3, r0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <get_water_level>:

uint16_t get_water_level()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	return get_analog_state(TANK);
 80006c8:	200f      	movs	r0, #15
 80006ca:	f7ff ffb9 	bl	8000640 <get_analog_state>
 80006ce:	4603      	mov	r3, r0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <transmit_state>:

	 return;
}

void transmit_state(STATE s, uint8_t* msg)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
	switch(global_state){
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <transmit_state+0xa4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b05      	cmp	r3, #5
 80006e6:	d82d      	bhi.n	8000744 <transmit_state+0x70>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <transmit_state+0x1c>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000709 	.word	0x08000709
 80006f4:	08000713 	.word	0x08000713
 80006f8:	0800071d 	.word	0x0800071d
 80006fc:	08000727 	.word	0x08000727
 8000700:	08000731 	.word	0x08000731
 8000704:	0800073b 	.word	0x0800073b
		case IDLE:
			sprintf((char*)msg, "State: IDLE\r\n");
 8000708:	491c      	ldr	r1, [pc, #112]	; (800077c <transmit_state+0xa8>)
 800070a:	6838      	ldr	r0, [r7, #0]
 800070c:	f002 fe1a 	bl	8003344 <siprintf>
			break;
 8000710:	e019      	b.n	8000746 <transmit_state+0x72>
		case ON:
			sprintf((char*)msg, "State: ON\r\n");
 8000712:	491b      	ldr	r1, [pc, #108]	; (8000780 <transmit_state+0xac>)
 8000714:	6838      	ldr	r0, [r7, #0]
 8000716:	f002 fe15 	bl	8003344 <siprintf>
			break;
 800071a:	e014      	b.n	8000746 <transmit_state+0x72>
		case ONE_CUP:
			sprintf((char*)msg, "State: ONE_CUP\r\n");
 800071c:	4919      	ldr	r1, [pc, #100]	; (8000784 <transmit_state+0xb0>)
 800071e:	6838      	ldr	r0, [r7, #0]
 8000720:	f002 fe10 	bl	8003344 <siprintf>
			break;
 8000724:	e00f      	b.n	8000746 <transmit_state+0x72>
		case TWO_CUPS:
			sprintf((char*)msg, "State: TWO_CUPS\r\n");
 8000726:	4918      	ldr	r1, [pc, #96]	; (8000788 <transmit_state+0xb4>)
 8000728:	6838      	ldr	r0, [r7, #0]
 800072a:	f002 fe0b 	bl	8003344 <siprintf>
			break;
 800072e:	e00a      	b.n	8000746 <transmit_state+0x72>
		case HEATING:
			sprintf((char*)msg, "State: HEATING\r\n");
 8000730:	4916      	ldr	r1, [pc, #88]	; (800078c <transmit_state+0xb8>)
 8000732:	6838      	ldr	r0, [r7, #0]
 8000734:	f002 fe06 	bl	8003344 <siprintf>
			break;
 8000738:	e005      	b.n	8000746 <transmit_state+0x72>
		case FEHLER:
			sprintf((char*)msg, "State: FEHLER\r\n");
 800073a:	4915      	ldr	r1, [pc, #84]	; (8000790 <transmit_state+0xbc>)
 800073c:	6838      	ldr	r0, [r7, #0]
 800073e:	f002 fe01 	bl	8003344 <siprintf>
			break;
 8000742:	e000      	b.n	8000746 <transmit_state+0x72>
		default:
			break;
 8000744:	bf00      	nop

	}

	HAL_UART_Transmit(&huart2, msg, 64, 0xFF);
 8000746:	23ff      	movs	r3, #255	; 0xff
 8000748:	2240      	movs	r2, #64	; 0x40
 800074a:	6839      	ldr	r1, [r7, #0]
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <transmit_state+0xc0>)
 800074e:	f002 fa52 	bl	8002bf6 <HAL_UART_Transmit>

	for(int i = 0; i != BUFFER_SIZE; ++i)
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	e007      	b.n	8000768 <transmit_state+0x94>
	{
		// rezero the message buffer
		buffer[i] = '\r';
 8000758:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <transmit_state+0xc4>)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4413      	add	r3, r2
 800075e:	220d      	movs	r2, #13
 8000760:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i != BUFFER_SIZE; ++i)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	3301      	adds	r3, #1
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2b40      	cmp	r3, #64	; 0x40
 800076c:	d1f4      	bne.n	8000758 <transmit_state+0x84>
	}

	return;
 800076e:	bf00      	nop
}
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000160 	.word	0x20000160
 800077c:	08003c40 	.word	0x08003c40
 8000780:	08003c50 	.word	0x08003c50
 8000784:	08003c5c 	.word	0x08003c5c
 8000788:	08003c70 	.word	0x08003c70
 800078c:	08003c84 	.word	0x08003c84
 8000790:	08003c98 	.word	0x08003c98
 8000794:	2000011c 	.word	0x2000011c
 8000798:	20000164 	.word	0x20000164

0800079c <on_startup>:

void on_startup()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	char* startup_message = "****************************\r\n\tBARISTA PROJECT\t\r\n\t J. Hoersch\r\n\t W. Klaffke\r\n\t PRM WS 2022\r\n****************************\r\n";
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <on_startup+0x28>)
 80007a4:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)startup_message, strlen(startup_message), TRANSMIT_TIMEOUT);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff fd1a 	bl	80001e0 <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	23ff      	movs	r3, #255	; 0xff
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <on_startup+0x2c>)
 80007b6:	f002 fa1e 	bl	8002bf6 <HAL_UART_Transmit>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	08003ca8 	.word	0x08003ca8
 80007c8:	2000011c 	.word	0x2000011c

080007cc <get_buttons>:


void get_buttons(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	/* Read States of Power, CUP_1 and CUP_2 Keys */

	if(HAL_GPIO_ReadPin(GPIOA, ON_OFF_KEY) != 0)
 80007d0:	2180      	movs	r1, #128	; 0x80
 80007d2:	4831      	ldr	r0, [pc, #196]	; (8000898 <get_buttons+0xcc>)
 80007d4:	f001 fb90 	bl	8001ef8 <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d027      	beq.n	800082e <get_buttons+0x62>
	{

		if(global_state == IDLE)
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <get_buttons+0xd0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10b      	bne.n	80007fe <get_buttons+0x32>
		{
			// Turn ON if Power Button is pressed
			set_global_state(ON);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff fed4 	bl	8000594 <set_global_state>
			HAL_GPIO_WritePin(GPIOB, LED_CONTROL, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f2:	482b      	ldr	r0, [pc, #172]	; (80008a0 <get_buttons+0xd4>)
 80007f4:	f001 fb98 	bl	8001f28 <HAL_GPIO_WritePin>

			on_startup();
 80007f8:	f7ff ffd0 	bl	800079c <on_startup>
 80007fc:	e010      	b.n	8000820 <get_buttons+0x54>

		}else if(global_state == ON){
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <get_buttons+0xd0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d10c      	bne.n	8000820 <get_buttons+0x54>
			// Turn OFF if Power Button is pressed again
			set_global_state(IDLE);
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff fec4 	bl	8000594 <set_global_state>
			HAL_GPIO_WritePin(GPIOB, LED_CONTROL, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000812:	4823      	ldr	r0, [pc, #140]	; (80008a0 <get_buttons+0xd4>)
 8000814:	f001 fb88 	bl	8001f28 <HAL_GPIO_WritePin>
		}

		while(HAL_GPIO_ReadPin(GPIOA, ON_OFF_KEY) != 0) // Debouncing
 8000818:	e002      	b.n	8000820 <get_buttons+0x54>
		{
			HAL_Delay(DEBOUNCE_DELAY);
 800081a:	2028      	movs	r0, #40	; 0x28
 800081c:	f000 fcc0 	bl	80011a0 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA, ON_OFF_KEY) != 0) // Debouncing
 8000820:	2180      	movs	r1, #128	; 0x80
 8000822:	481d      	ldr	r0, [pc, #116]	; (8000898 <get_buttons+0xcc>)
 8000824:	f001 fb68 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f5      	bne.n	800081a <get_buttons+0x4e>
		}
	}

	if(HAL_GPIO_ReadPin(GPIOA, CUP_1_KEY) != 0 && global_state == ON)
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	4819      	ldr	r0, [pc, #100]	; (8000898 <get_buttons+0xcc>)
 8000832:	f001 fb61 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d011      	beq.n	8000860 <get_buttons+0x94>
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <get_buttons+0xd0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10d      	bne.n	8000860 <get_buttons+0x94>
	{
		/* Can only be activated if POWER state is ON */
		set_global_state(ONE_CUP);
 8000844:	2002      	movs	r0, #2
 8000846:	f7ff fea5 	bl	8000594 <set_global_state>

		while(HAL_GPIO_ReadPin(GPIOA, CUP_1_KEY) != 0) // Debouncing
 800084a:	e002      	b.n	8000852 <get_buttons+0x86>
		{
			HAL_Delay(DEBOUNCE_DELAY);
 800084c:	2028      	movs	r0, #40	; 0x28
 800084e:	f000 fca7 	bl	80011a0 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA, CUP_1_KEY) != 0) // Debouncing
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	4810      	ldr	r0, [pc, #64]	; (8000898 <get_buttons+0xcc>)
 8000856:	f001 fb4f 	bl	8001ef8 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f5      	bne.n	800084c <get_buttons+0x80>
		}
	}

	if(HAL_GPIO_ReadPin(GPIOA, CUP_2_KEY) != 0 && global_state == ON)
 8000860:	2110      	movs	r1, #16
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <get_buttons+0xcc>)
 8000864:	f001 fb48 	bl	8001ef8 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d012      	beq.n	8000894 <get_buttons+0xc8>
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <get_buttons+0xd0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d10e      	bne.n	8000894 <get_buttons+0xc8>
	{
		/* Can only be activated if POWER state is ON */
		set_global_state(TWO_CUPS);
 8000876:	2003      	movs	r0, #3
 8000878:	f7ff fe8c 	bl	8000594 <set_global_state>

		while(HAL_GPIO_ReadPin(GPIOA, CUP_2_KEY) != 0) // Debouncing
 800087c:	e002      	b.n	8000884 <get_buttons+0xb8>
		{
			HAL_Delay(DEBOUNCE_DELAY);
 800087e:	2028      	movs	r0, #40	; 0x28
 8000880:	f000 fc8e 	bl	80011a0 <HAL_Delay>
		while(HAL_GPIO_ReadPin(GPIOA, CUP_2_KEY) != 0) // Debouncing
 8000884:	2110      	movs	r1, #16
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <get_buttons+0xcc>)
 8000888:	f001 fb36 	bl	8001ef8 <HAL_GPIO_ReadPin>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1f5      	bne.n	800087e <get_buttons+0xb2>
		}

	}

	return;
 8000892:	bf00      	nop
 8000894:	bf00      	nop
}
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40020000 	.word	0x40020000
 800089c:	20000160 	.word	0x20000160
 80008a0:	40020400 	.word	0x40020400

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008aa:	f000 fc07 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ae:	f000 f8f7 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b2:	f000 f9ff 	bl	8000cb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008b6:	f000 f9d3 	bl	8000c60 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008ba:	f000 f95b 	bl	8000b74 <MX_ADC1_Init>
  MX_TIM10_Init();
 80008be:	f000 f9ab 	bl	8000c18 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim10);
 80008c2:	4873      	ldr	r0, [pc, #460]	; (8000a90 <main+0x1ec>)
 80008c4:	f002 f870 	bl	80029a8 <HAL_TIM_Base_Start>

  uint16_t vals[2];

  int secs = 0; // Tracking the seconds the control LED has been blinking
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  transmit_sensors(vals, buffer);
	  get_buttons();
 80008cc:	f7ff ff7e 	bl	80007cc <get_buttons>


	  switch(global_state){
 80008d0:	4b70      	ldr	r3, [pc, #448]	; (8000a94 <main+0x1f0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	f200 80cf 	bhi.w	8000a78 <main+0x1d4>
 80008da:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <main+0x3c>)
 80008dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e0:	08000a79 	.word	0x08000a79
 80008e4:	080008f9 	.word	0x080008f9
 80008e8:	08000931 	.word	0x08000931
 80008ec:	080009a1 	.word	0x080009a1
 80008f0:	08000a0d 	.word	0x08000a0d
 80008f4:	08000a3d 	.word	0x08000a3d
	  	  case IDLE:
	  		  break;

	  	  case ON:
	  		  HAL_GPIO_WritePin(GPIOB, LED_CONTROL, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fe:	4866      	ldr	r0, [pc, #408]	; (8000a98 <main+0x1f4>)
 8000900:	f001 fb12 	bl	8001f28 <HAL_GPIO_WritePin>

	  		  if(get_water_level() < WATER_LEVEL_LOW)
 8000904:	f7ff fede 	bl	80006c4 <get_water_level>
 8000908:	4603      	mov	r3, r0
 800090a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800090e:	d202      	bcs.n	8000916 <main+0x72>
	  		  {
	  			  set_global_state(FEHLER);
 8000910:	2005      	movs	r0, #5
 8000912:	f7ff fe3f 	bl	8000594 <set_global_state>
	  		  }

	  		  if(get_temp() < TEMP_HOT)
 8000916:	f7ff fecd 	bl	80006b4 <get_temp>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8000922:	429a      	cmp	r2, r3
 8000924:	f200 80aa 	bhi.w	8000a7c <main+0x1d8>
	  		  {
	  			  set_global_state(HEATING);
 8000928:	2004      	movs	r0, #4
 800092a:	f7ff fe33 	bl	8000594 <set_global_state>
	  		  }

	  		  break;
 800092e:	e0a5      	b.n	8000a7c <main+0x1d8>

	  	  case ONE_CUP:
	  		  HAL_GPIO_WritePin(GPIOB, HEATER_CONTROL, 1);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000936:	4858      	ldr	r0, [pc, #352]	; (8000a98 <main+0x1f4>)
 8000938:	f001 faf6 	bl	8001f28 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, PUMP_CONTROL, 1);
 800093c:	2201      	movs	r2, #1
 800093e:	2102      	movs	r1, #2
 8000940:	4855      	ldr	r0, [pc, #340]	; (8000a98 <main+0x1f4>)
 8000942:	f001 faf1 	bl	8001f28 <HAL_GPIO_WritePin>

	  		  if(__HAL_TIM_GET_COUNTER(&htim10) - timer_val >= 5000)
 8000946:	4b52      	ldr	r3, [pc, #328]	; (8000a90 <main+0x1ec>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094c:	4a53      	ldr	r2, [pc, #332]	; (8000a9c <main+0x1f8>)
 800094e:	8812      	ldrh	r2, [r2, #0]
 8000950:	1a9b      	subs	r3, r3, r2
 8000952:	f241 3287 	movw	r2, #4999	; 0x1387
 8000956:	4293      	cmp	r3, r2
 8000958:	d90d      	bls.n	8000976 <main+0xd2>
	  		  {
	  			  HAL_GPIO_TogglePin(GPIOB, LED_CONTROL);
 800095a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095e:	484e      	ldr	r0, [pc, #312]	; (8000a98 <main+0x1f4>)
 8000960:	f001 fafb 	bl	8001f5a <HAL_GPIO_TogglePin>
	  			  timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 8000964:	4b4a      	ldr	r3, [pc, #296]	; (8000a90 <main+0x1ec>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <main+0x1f8>)
 800096e:	801a      	strh	r2, [r3, #0]
	  			  secs++;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3301      	adds	r3, #1
 8000974:	607b      	str	r3, [r7, #4]
	  		  }
	  		  if(secs > CUP_1_TIME*2)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0a      	cmp	r3, #10
 800097a:	f340 8081 	ble.w	8000a80 <main+0x1dc>
	  		  {
	  			  secs = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
	  			  set_global_state(ON);
 8000982:	2001      	movs	r0, #1
 8000984:	f7ff fe06 	bl	8000594 <set_global_state>
		  		  HAL_GPIO_WritePin(GPIOB, HEATER_CONTROL, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098e:	4842      	ldr	r0, [pc, #264]	; (8000a98 <main+0x1f4>)
 8000990:	f001 faca 	bl	8001f28 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOB, PUMP_CONTROL, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2102      	movs	r1, #2
 8000998:	483f      	ldr	r0, [pc, #252]	; (8000a98 <main+0x1f4>)
 800099a:	f001 fac5 	bl	8001f28 <HAL_GPIO_WritePin>
	  		  }
	  		  break;
 800099e:	e06f      	b.n	8000a80 <main+0x1dc>

	  	  case TWO_CUPS:
	  		  HAL_GPIO_WritePin(GPIOB, HEATER_CONTROL, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a6:	483c      	ldr	r0, [pc, #240]	; (8000a98 <main+0x1f4>)
 80009a8:	f001 fabe 	bl	8001f28 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, PUMP_CONTROL, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2102      	movs	r1, #2
 80009b0:	4839      	ldr	r0, [pc, #228]	; (8000a98 <main+0x1f4>)
 80009b2:	f001 fab9 	bl	8001f28 <HAL_GPIO_WritePin>

	  		  if(__HAL_TIM_GET_COUNTER(&htim10) - timer_val >= 1000)
 80009b6:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <main+0x1ec>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	4a37      	ldr	r2, [pc, #220]	; (8000a9c <main+0x1f8>)
 80009be:	8812      	ldrh	r2, [r2, #0]
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009c6:	d30d      	bcc.n	80009e4 <main+0x140>
	  		  {
	  			  HAL_GPIO_TogglePin(GPIOB, LED_CONTROL);
 80009c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009cc:	4832      	ldr	r0, [pc, #200]	; (8000a98 <main+0x1f4>)
 80009ce:	f001 fac4 	bl	8001f5a <HAL_GPIO_TogglePin>
	  			  timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 80009d2:	4b2f      	ldr	r3, [pc, #188]	; (8000a90 <main+0x1ec>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <main+0x1f8>)
 80009dc:	801a      	strh	r2, [r3, #0]
	  			  secs++;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3301      	adds	r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
	  		  }

	  		  if(secs > CUP_2_TIME*5)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b32      	cmp	r3, #50	; 0x32
 80009e8:	dd4c      	ble.n	8000a84 <main+0x1e0>
	  		  {
	  			  secs = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
	  			  set_global_state(ON);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff fdd0 	bl	8000594 <set_global_state>
		  		  HAL_GPIO_WritePin(GPIOB, HEATER_CONTROL, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fa:	4827      	ldr	r0, [pc, #156]	; (8000a98 <main+0x1f4>)
 80009fc:	f001 fa94 	bl	8001f28 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOB, PUMP_CONTROL, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2102      	movs	r1, #2
 8000a04:	4824      	ldr	r0, [pc, #144]	; (8000a98 <main+0x1f4>)
 8000a06:	f001 fa8f 	bl	8001f28 <HAL_GPIO_WritePin>

	  		  }
	  		  break;
 8000a0a:	e03b      	b.n	8000a84 <main+0x1e0>

	  	  case HEATING:
	  		  HAL_GPIO_WritePin(GPIOB, HEATER_CONTROL, 1);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4821      	ldr	r0, [pc, #132]	; (8000a98 <main+0x1f4>)
 8000a14:	f001 fa88 	bl	8001f28 <HAL_GPIO_WritePin>
	  		  if(get_temp() >= TEMP_HOT)
 8000a18:	f7ff fe4c 	bl	80006b4 <get_temp>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	461a      	mov	r2, r3
 8000a20:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d92f      	bls.n	8000a88 <main+0x1e4>
	  		  {
		  		  HAL_GPIO_WritePin(GPIOB, HEATER_CONTROL, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2e:	481a      	ldr	r0, [pc, #104]	; (8000a98 <main+0x1f4>)
 8000a30:	f001 fa7a 	bl	8001f28 <HAL_GPIO_WritePin>
	  			  set_global_state(ON);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fdad 	bl	8000594 <set_global_state>
	  		  }
	  		  break;
 8000a3a:	e025      	b.n	8000a88 <main+0x1e4>

	  	  case FEHLER:
	  		  if(__HAL_TIM_GET_COUNTER(&htim10) - timer_val >= 1000)
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <main+0x1ec>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <main+0x1f8>)
 8000a44:	8812      	ldrh	r2, [r2, #0]
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a4c:	d30a      	bcc.n	8000a64 <main+0x1c0>
	  		  {
	  			  HAL_GPIO_TogglePin(GPIOB, LED_CONTROL);
 8000a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <main+0x1f4>)
 8000a54:	f001 fa81 	bl	8001f5a <HAL_GPIO_TogglePin>
	  			  timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <main+0x1ec>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <main+0x1f8>)
 8000a62:	801a      	strh	r2, [r3, #0]
	  		  }

	  		  if(get_water_level() >= WATER_LEVEL_LOW)
 8000a64:	f7ff fe2e 	bl	80006c4 <get_water_level>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a6e:	d30d      	bcc.n	8000a8c <main+0x1e8>
	  		  {
	  			  set_global_state(ON);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fd8f 	bl	8000594 <set_global_state>
	  		  }
	  		  break;
 8000a76:	e009      	b.n	8000a8c <main+0x1e8>

	  	  default:
	  		  break;
 8000a78:	bf00      	nop
 8000a7a:	e727      	b.n	80008cc <main+0x28>
	  		  break;
 8000a7c:	bf00      	nop
 8000a7e:	e725      	b.n	80008cc <main+0x28>
	  		  break;
 8000a80:	bf00      	nop
 8000a82:	e723      	b.n	80008cc <main+0x28>
	  		  break;
 8000a84:	bf00      	nop
 8000a86:	e721      	b.n	80008cc <main+0x28>
	  		  break;
 8000a88:	bf00      	nop
 8000a8a:	e71f      	b.n	80008cc <main+0x28>
	  		  break;
 8000a8c:	bf00      	nop
	  get_buttons();
 8000a8e:	e71d      	b.n	80008cc <main+0x28>
 8000a90:	200000d4 	.word	0x200000d4
 8000a94:	20000160 	.word	0x20000160
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	200001a4 	.word	0x200001a4

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b094      	sub	sp, #80	; 0x50
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0320 	add.w	r3, r7, #32
 8000aaa:	2230      	movs	r2, #48	; 0x30
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fc40 	bl	8003334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <SystemClock_Config+0xcc>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <SystemClock_Config+0xcc>)
 8000ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad4:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <SystemClock_Config+0xcc>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <SystemClock_Config+0xd0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <SystemClock_Config+0xd0>)
 8000aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <SystemClock_Config+0xd0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afc:	2302      	movs	r3, #2
 8000afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b00:	2301      	movs	r3, #1
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2310      	movs	r3, #16
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b10:	2310      	movs	r3, #16
 8000b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b14:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fa56 	bl	8001fd8 <HAL_RCC_OscConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b32:	f000 f943 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b36:	230f      	movs	r3, #15
 8000b38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2102      	movs	r1, #2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 fcb8 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b5e:	f000 f92d 	bl	8000dbc <Error_Handler>
  }
}
 8000b62:	bf00      	nop
 8000b64:	3750      	adds	r7, #80	; 0x50
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000

08000b74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000b88:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <MX_ADC1_Init+0x9c>)
 8000b8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000b8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <MX_ADC1_Init+0xa0>)
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000bd6:	f000 fb07 	bl	80011e8 <HAL_ADC_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000be0:	f000 f8ec 	bl	8000dbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000be4:	230e      	movs	r3, #14
 8000be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_ADC1_Init+0x98>)
 8000bf6:	f000 fcbb 	bl	8001570 <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c00:	f000 f8dc 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	2000008c 	.word	0x2000008c
 8000c10:	40012000 	.word	0x40012000
 8000c14:	0f000001 	.word	0x0f000001

08000c18 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_TIM10_Init+0x40>)
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <MX_TIM10_Init+0x44>)
 8000c20:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8000-1;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_TIM10_Init+0x40>)
 8000c24:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c28:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_TIM10_Init+0x40>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_TIM10_Init+0x40>)
 8000c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c36:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_TIM10_Init+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_TIM10_Init+0x40>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_TIM10_Init+0x40>)
 8000c46:	f001 fe5f 	bl	8002908 <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000c50:	f000 f8b4 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000d4 	.word	0x200000d4
 8000c5c:	40014400 	.word	0x40014400

08000c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MX_USART2_UART_Init+0x50>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART2_UART_Init+0x4c>)
 8000c98:	f001 ff60 	bl	8002b5c <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ca2:	f000 f88b 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000011c 	.word	0x2000011c
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a37      	ldr	r2, [pc, #220]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a30      	ldr	r2, [pc, #192]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <MX_GPIO_Init+0xfc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f249 0112 	movw	r1, #36882	; 0x9012
 8000d40:	481c      	ldr	r0, [pc, #112]	; (8000db4 <MX_GPIO_Init+0x100>)
 8000d42:	f001 f8f1 	bl	8001f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000d46:	2350      	movs	r3, #80	; 0x50
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4817      	ldr	r0, [pc, #92]	; (8000db8 <MX_GPIO_Init+0x104>)
 8000d5a:	f000 ff49 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_GPIO_Init+0x104>)
 8000d74:	f000 ff3c 	bl	8001bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB12 PB15 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_4;
 8000d78:	f249 0312 	movw	r3, #36882	; 0x9012
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4808      	ldr	r0, [pc, #32]	; (8000db4 <MX_GPIO_Init+0x100>)
 8000d92:	f000 ff2d 	bl	8001bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2017      	movs	r0, #23
 8000d9c:	f000 fef1 	bl	8001b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000da0:	2017      	movs	r0, #23
 8000da2:	f000 ff0a 	bl	8001bba <HAL_NVIC_EnableIRQ>

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40020000 	.word	0x40020000

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e06:	2007      	movs	r0, #7
 8000e08:	f000 feb0 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_ADC_MspInit+0x7c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d127      	bne.n	8000e8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_ADC_MspInit+0x80>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e72:	2330      	movs	r3, #48	; 0x30
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	2303      	movs	r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_ADC_MspInit+0x84>)
 8000e86:	f000 feb3 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	; 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40012000 	.word	0x40012000
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020800 	.word	0x40020800

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_TIM_Base_MspInit+0x3c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d10d      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_TIM_Base_MspInit+0x40>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_TIM_Base_MspInit+0x40>)
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_TIM_Base_MspInit+0x40>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40014400 	.word	0x40014400
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x84>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12b      	bne.n	8000f5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_UART_MspInit+0x88>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_UART_MspInit+0x8c>)
 8000f5a:	f000 fe49 	bl	8001bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <NMI_Handler+0x4>

08000f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler+0x4>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <BusFault_Handler+0x4>

08000f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <UsageFault_Handler+0x4>

08000f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f8ce 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000fcc:	2080      	movs	r0, #128	; 0x80
 8000fce:	f000 ffdf 	bl	8001f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f002 f96a 	bl	80032e0 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20020000 	.word	0x20020000
 8001038:	00000400 	.word	0x00000400
 800103c:	200001a8 	.word	0x200001a8
 8001040:	200001c0 	.word	0x200001c0

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001084:	4c0b      	ldr	r4, [pc, #44]	; (80010b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001092:	f7ff ffd7 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f002 f929 	bl	80032ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fc03 	bl	80008a4 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010ac:	08003d80 	.word	0x08003d80
  ldr r2, =_sbss
 80010b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010b4:	200001c0 	.word	0x200001c0

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 fd41 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f808 	bl	8001100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fe6a 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x54>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x58>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	fbb3 f3f1 	udiv	r3, r3, r1
 800111a:	fbb2 f3f3 	udiv	r3, r2, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fd59 	bl	8001bd6 <HAL_SYSTICK_Config>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e00e      	b.n	800114c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d80a      	bhi.n	800114a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 fd21 	bl	8001b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_InitTick+0x5c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x20>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x24>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4413      	add	r3, r2
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_IncTick+0x24>)
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000008 	.word	0x20000008
 8001184:	200001ac 	.word	0x200001ac

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <HAL_GetTick+0x14>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	200001ac 	.word	0x200001ac

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff ffee 	bl	8001188 <HAL_GetTick>
 80011ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	bf00      	nop
 80011c8:	f7ff ffde 	bl	8001188 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008

080011e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e033      	b.n	8001266 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fe06 	bl	8000e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	2b00      	cmp	r3, #0
 8001224:	d118      	bne.n	8001258 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800122e:	f023 0302 	bic.w	r3, r3, #2
 8001232:	f043 0202 	orr.w	r2, r3, #2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 faca 	bl	80017d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	641a      	str	r2, [r3, #64]	; 0x40
 8001256:	e001      	b.n	800125c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_ADC_Start+0x1a>
 8001286:	2302      	movs	r3, #2
 8001288:	e097      	b.n	80013ba <HAL_ADC_Start+0x14a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	d018      	beq.n	80012d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0201 	orr.w	r2, r2, #1
 80012ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <HAL_ADC_Start+0x158>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a45      	ldr	r2, [pc, #276]	; (80013cc <HAL_ADC_Start+0x15c>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9a      	lsrs	r2, r3, #18
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80012c4:	e002      	b.n	80012cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f9      	bne.n	80012c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d15f      	bne.n	80013a0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800130a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800131e:	d106      	bne.n	800132e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	f023 0206 	bic.w	r2, r3, #6
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	645a      	str	r2, [r3, #68]	; 0x44
 800132c:	e002      	b.n	8001334 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_ADC_Start+0x160>)
 800133e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001348:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10f      	bne.n	8001376 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d129      	bne.n	80013b8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	e020      	b.n	80013b8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <HAL_ADC_Start+0x164>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d11b      	bne.n	80013b8 <HAL_ADC_Start+0x148>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d114      	bne.n	80013b8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	e00b      	b.n	80013b8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	f043 0210 	orr.w	r2, r3, #16
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	40012300 	.word	0x40012300
 80013d4:	40012000 	.word	0x40012000

080013d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Stop+0x16>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e021      	b.n	8001432 <HAL_ADC_Stop+0x5a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800145a:	d113      	bne.n	8001484 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800146a:	d10b      	bne.n	8001484 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f043 0220 	orr.w	r2, r3, #32
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e063      	b.n	800154c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001484:	f7ff fe80 	bl	8001188 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800148a:	e021      	b.n	80014d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001492:	d01d      	beq.n	80014d0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_ADC_PollForConversion+0x6c>
 800149a:	f7ff fe75 	bl	8001188 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d212      	bcs.n	80014d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d00b      	beq.n	80014d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f043 0204 	orr.w	r2, r3, #4
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e03d      	b.n	800154c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d1d6      	bne.n	800148c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f06f 0212 	mvn.w	r2, #18
 80014e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d123      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001506:	2b00      	cmp	r3, #0
 8001508:	d11f      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001522:	2b00      	cmp	r3, #0
 8001524:	d111      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d105      	bne.n	800154a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_ADC_ConfigChannel+0x1c>
 8001588:	2302      	movs	r3, #2
 800158a:	e113      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x244>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d925      	bls.n	80015e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68d9      	ldr	r1, [r3, #12]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	3b1e      	subs	r3, #30
 80015b2:	2207      	movs	r2, #7
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43da      	mvns	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	400a      	ands	r2, r1
 80015c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68d9      	ldr	r1, [r3, #12]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	4603      	mov	r3, r0
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4403      	add	r3, r0
 80015da:	3b1e      	subs	r3, #30
 80015dc:	409a      	lsls	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	e022      	b.n	800162e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6919      	ldr	r1, [r3, #16]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	2207      	movs	r2, #7
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	400a      	ands	r2, r1
 800160a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6919      	ldr	r1, [r3, #16]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	4603      	mov	r3, r0
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4403      	add	r3, r0
 8001624:	409a      	lsls	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b06      	cmp	r3, #6
 8001634:	d824      	bhi.n	8001680 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	3b05      	subs	r3, #5
 8001648:	221f      	movs	r2, #31
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	400a      	ands	r2, r1
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	3b05      	subs	r3, #5
 8001672:	fa00 f203 	lsl.w	r2, r0, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	635a      	str	r2, [r3, #52]	; 0x34
 800167e:	e04c      	b.n	800171a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b0c      	cmp	r3, #12
 8001686:	d824      	bhi.n	80016d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3b23      	subs	r3, #35	; 0x23
 800169a:	221f      	movs	r2, #31
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43da      	mvns	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	400a      	ands	r2, r1
 80016a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3b23      	subs	r3, #35	; 0x23
 80016c4:	fa00 f203 	lsl.w	r2, r0, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
 80016d0:	e023      	b.n	800171a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	3b41      	subs	r3, #65	; 0x41
 80016e4:	221f      	movs	r2, #31
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	400a      	ands	r2, r1
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	3b41      	subs	r3, #65	; 0x41
 800170e:	fa00 f203 	lsl.w	r2, r0, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_ADC_ConfigChannel+0x250>)
 800171c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <HAL_ADC_ConfigChannel+0x254>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d10f      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1d8>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b12      	cmp	r3, #18
 800172e:	d10b      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <HAL_ADC_ConfigChannel+0x254>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d12b      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x23a>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <HAL_ADC_ConfigChannel+0x258>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d003      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x1f4>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b11      	cmp	r3, #17
 8001762:	d122      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <HAL_ADC_ConfigChannel+0x258>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d111      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_ADC_ConfigChannel+0x25c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_ADC_ConfigChannel+0x260>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	0c9a      	lsrs	r2, r3, #18
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800179c:	e002      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f9      	bne.n	800179e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40012300 	.word	0x40012300
 80017c4:	40012000 	.word	0x40012000
 80017c8:	10000012 	.word	0x10000012
 80017cc:	20000000 	.word	0x20000000
 80017d0:	431bde83 	.word	0x431bde83

080017d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017dc:	4b79      	ldr	r3, [pc, #484]	; (80019c4 <ADC_Init+0x1f0>)
 80017de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	021a      	lsls	r2, r3, #8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800182c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6899      	ldr	r1, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <ADC_Init+0x1f4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d022      	beq.n	80018b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800187a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6899      	ldr	r1, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800189c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6899      	ldr	r1, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	e00f      	b.n	80018d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0202 	bic.w	r2, r2, #2
 80018e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6899      	ldr	r1, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7e1b      	ldrb	r3, [r3, #24]
 80018ec:	005a      	lsls	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01b      	beq.n	8001938 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800190e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800191e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	3b01      	subs	r3, #1
 800192c:	035a      	lsls	r2, r3, #13
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	e007      	b.n	8001948 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001946:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	3b01      	subs	r3, #1
 8001964:	051a      	lsls	r2, r3, #20
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800197c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6899      	ldr	r1, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800198a:	025a      	lsls	r2, r3, #9
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6899      	ldr	r1, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	029a      	lsls	r2, r3, #10
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	609a      	str	r2, [r3, #8]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40012300 	.word	0x40012300
 80019c8:	0f000001 	.word	0x0f000001

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	; (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b38:	d301      	bcc.n	8001b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00f      	b.n	8001b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <SysTick_Config+0x40>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b46:	210f      	movs	r1, #15
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f7ff ff8e 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <SysTick_Config+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <SysTick_Config+0x40>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff29 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b94:	f7ff ff3e 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f7ff ff8e 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff5d 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff31 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffa2 	bl	8001b28 <SysTick_Config>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e159      	b.n	8001ec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f040 8148 	bne.w	8001eba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d005      	beq.n	8001c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d130      	bne.n	8001ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 0201 	and.w	r2, r3, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d017      	beq.n	8001ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d123      	bne.n	8001d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	08da      	lsrs	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3208      	adds	r2, #8
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80a2 	beq.w	8001eba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	4a56      	ldr	r2, [pc, #344]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d84:	6453      	str	r3, [r2, #68]	; 0x44
 8001d86:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <HAL_GPIO_Init+0x2e8>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d92:	4a52      	ldr	r2, [pc, #328]	; (8001edc <HAL_GPIO_Init+0x2ec>)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a49      	ldr	r2, [pc, #292]	; (8001ee0 <HAL_GPIO_Init+0x2f0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x202>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a48      	ldr	r2, [pc, #288]	; (8001ee4 <HAL_GPIO_Init+0x2f4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x1fe>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a47      	ldr	r2, [pc, #284]	; (8001ee8 <HAL_GPIO_Init+0x2f8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x1fa>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a46      	ldr	r2, [pc, #280]	; (8001eec <HAL_GPIO_Init+0x2fc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x1f6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <HAL_GPIO_Init+0x300>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x1f2>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_Init+0x204>
 8001df2:	2300      	movs	r3, #0
 8001df4:	69fa      	ldr	r2, [r7, #28]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e04:	4935      	ldr	r1, [pc, #212]	; (8001edc <HAL_GPIO_Init+0x2ec>)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e12:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e36:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e60:	4a24      	ldr	r2, [pc, #144]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e66:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb4:	4a0f      	ldr	r2, [pc, #60]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61fb      	str	r3, [r7, #28]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	f67f aea2 	bls.w	8001c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40013c00 	.word	0x40013c00

08001ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	887b      	ldrh	r3, [r7, #2]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f38:	787b      	ldrb	r3, [r7, #1]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f44:	e003      	b.n	8001f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	041a      	lsls	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	619a      	str	r2, [r3, #24]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f6c:	887a      	ldrh	r2, [r7, #2]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	041a      	lsls	r2, r3, #16
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	400b      	ands	r3, r1
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f806 	bl	8001fc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e267      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d075      	beq.n	80020e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff6:	4b88      	ldr	r3, [pc, #544]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d00c      	beq.n	800201c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002002:	4b85      	ldr	r3, [pc, #532]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800200a:	2b08      	cmp	r3, #8
 800200c:	d112      	bne.n	8002034 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200e:	4b82      	ldr	r3, [pc, #520]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800201a:	d10b      	bne.n	8002034 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201c:	4b7e      	ldr	r3, [pc, #504]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d05b      	beq.n	80020e0 <HAL_RCC_OscConfig+0x108>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d157      	bne.n	80020e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e242      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203c:	d106      	bne.n	800204c <HAL_RCC_OscConfig+0x74>
 800203e:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a75      	ldr	r2, [pc, #468]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e01d      	b.n	8002088 <HAL_RCC_OscConfig+0xb0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x98>
 8002056:	4b70      	ldr	r3, [pc, #448]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6f      	ldr	r2, [pc, #444]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 800205c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b6d      	ldr	r3, [pc, #436]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6c      	ldr	r2, [pc, #432]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0xb0>
 8002070:	4b69      	ldr	r3, [pc, #420]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a68      	ldr	r2, [pc, #416]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b66      	ldr	r3, [pc, #408]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a65      	ldr	r2, [pc, #404]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff f87a 	bl	8001188 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002098:	f7ff f876 	bl	8001188 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e207      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0xc0>
 80020b6:	e014      	b.n	80020e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff f866 	bl	8001188 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff f862 	bl	8001188 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e1f3      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	4b51      	ldr	r3, [pc, #324]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0xe8>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d063      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00b      	beq.n	8002112 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020fa:	4b47      	ldr	r3, [pc, #284]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002102:	2b08      	cmp	r3, #8
 8002104:	d11c      	bne.n	8002140 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002106:	4b44      	ldr	r3, [pc, #272]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d116      	bne.n	8002140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_RCC_OscConfig+0x152>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e1c7      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212a:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4937      	ldr	r1, [pc, #220]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213e:	e03a      	b.n	80021b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002148:	4b34      	ldr	r3, [pc, #208]	; (800221c <HAL_RCC_OscConfig+0x244>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7ff f81b 	bl	8001188 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002156:	f7ff f817 	bl	8001188 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e1a8      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002174:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4925      	ldr	r1, [pc, #148]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]
 8002188:	e015      	b.n	80021b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_OscConfig+0x244>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe fffa 	bl	8001188 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002198:	f7fe fff6 	bl	8001188 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e187      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d036      	beq.n	8002230 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d016      	beq.n	80021f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_RCC_OscConfig+0x248>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7fe ffda 	bl	8001188 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d8:	f7fe ffd6 	bl	8001188 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e167      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_OscConfig+0x240>)
 80021ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x200>
 80021f6:	e01b      	b.n	8002230 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_RCC_OscConfig+0x248>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7fe ffc3 	bl	8001188 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	e00e      	b.n	8002224 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002206:	f7fe ffbf 	bl	8001188 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d907      	bls.n	8002224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e150      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
 8002218:	40023800 	.word	0x40023800
 800221c:	42470000 	.word	0x42470000
 8002220:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002224:	4b88      	ldr	r3, [pc, #544]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ea      	bne.n	8002206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8097 	beq.w	800236c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b81      	ldr	r3, [pc, #516]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10f      	bne.n	800226e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b7d      	ldr	r3, [pc, #500]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a7c      	ldr	r2, [pc, #496]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b7a      	ldr	r3, [pc, #488]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4b77      	ldr	r3, [pc, #476]	; (800244c <HAL_RCC_OscConfig+0x474>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227a:	4b74      	ldr	r3, [pc, #464]	; (800244c <HAL_RCC_OscConfig+0x474>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a73      	ldr	r2, [pc, #460]	; (800244c <HAL_RCC_OscConfig+0x474>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7fe ff7f 	bl	8001188 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7fe ff7b 	bl	8001188 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e10c      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	4b6a      	ldr	r3, [pc, #424]	; (800244c <HAL_RCC_OscConfig+0x474>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x2ea>
 80022b4:	4b64      	ldr	r3, [pc, #400]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	4a63      	ldr	r2, [pc, #396]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6713      	str	r3, [r2, #112]	; 0x70
 80022c0:	e01c      	b.n	80022fc <HAL_RCC_OscConfig+0x324>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x30c>
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ce:	4a5e      	ldr	r2, [pc, #376]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	6713      	str	r3, [r2, #112]	; 0x70
 80022d6:	4b5c      	ldr	r3, [pc, #368]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	4a5b      	ldr	r2, [pc, #364]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6713      	str	r3, [r2, #112]	; 0x70
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0x324>
 80022e4:	4b58      	ldr	r3, [pc, #352]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a57      	ldr	r2, [pc, #348]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
 80022f0:	4b55      	ldr	r3, [pc, #340]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	4a54      	ldr	r2, [pc, #336]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80022f6:	f023 0304 	bic.w	r3, r3, #4
 80022fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d015      	beq.n	8002330 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7fe ff40 	bl	8001188 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230a:	e00a      	b.n	8002322 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7fe ff3c 	bl	8001188 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e0cb      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002322:	4b49      	ldr	r3, [pc, #292]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0ee      	beq.n	800230c <HAL_RCC_OscConfig+0x334>
 800232e:	e014      	b.n	800235a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7fe ff2a 	bl	8001188 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002336:	e00a      	b.n	800234e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002338:	f7fe ff26 	bl	8001188 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e0b5      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234e:	4b3e      	ldr	r3, [pc, #248]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ee      	bne.n	8002338 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d105      	bne.n	800236c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002360:	4b39      	ldr	r3, [pc, #228]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	4a38      	ldr	r2, [pc, #224]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a1 	beq.w	80024b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002376:	4b34      	ldr	r3, [pc, #208]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b08      	cmp	r3, #8
 8002380:	d05c      	beq.n	800243c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d141      	bne.n	800240e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_RCC_OscConfig+0x478>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe fefa 	bl	8001188 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe fef6 	bl	8001188 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e087      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023aa:	4b27      	ldr	r3, [pc, #156]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	019b      	lsls	r3, r3, #6
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	085b      	lsrs	r3, r3, #1
 80023ce:	3b01      	subs	r3, #1
 80023d0:	041b      	lsls	r3, r3, #16
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	491b      	ldr	r1, [pc, #108]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCC_OscConfig+0x478>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7fe fecf 	bl	8001188 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ee:	f7fe fecb 	bl	8001188 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e05c      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x416>
 800240c:	e054      	b.n	80024b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_RCC_OscConfig+0x478>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe feb8 	bl	8001188 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241c:	f7fe feb4 	bl	8001188 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e045      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_OscConfig+0x470>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x444>
 800243a:	e03d      	b.n	80024b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d107      	bne.n	8002454 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e038      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
 8002448:	40023800 	.word	0x40023800
 800244c:	40007000 	.word	0x40007000
 8002450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x4ec>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d028      	beq.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d121      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	429a      	cmp	r2, r3
 800247c:	d11a      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800248a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800248c:	4293      	cmp	r3, r2
 800248e:	d111      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	3b01      	subs	r3, #1
 800249e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0cc      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d90c      	bls.n	8002504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0b8      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002534:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002540:	4b50      	ldr	r3, [pc, #320]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	494d      	ldr	r1, [pc, #308]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d044      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d119      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e07f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d003      	beq.n	8002586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002582:	2b03      	cmp	r3, #3
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e067      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b37      	ldr	r3, [pc, #220]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4934      	ldr	r1, [pc, #208]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fde6 	bl	8001188 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7fe fde2 	bl	8001188 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e04f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d20c      	bcs.n	8002610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_ClockConfig+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e032      	b.n	8002676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4916      	ldr	r1, [pc, #88]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	490e      	ldr	r1, [pc, #56]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264e:	f000 f821 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 8002652:	4602      	mov	r2, r0
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	490a      	ldr	r1, [pc, #40]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	5ccb      	ldrb	r3, [r1, r3]
 8002662:	fa22 f303 	lsr.w	r3, r2, r3
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fd46 	bl	8001100 <HAL_InitTick>

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00
 8002684:	40023800 	.word	0x40023800
 8002688:	08003d24 	.word	0x08003d24
 800268c:	20000000 	.word	0x20000000
 8002690:	20000004 	.word	0x20000004

08002694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002698:	b094      	sub	sp, #80	; 0x50
 800269a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	647b      	str	r3, [r7, #68]	; 0x44
 80026a0:	2300      	movs	r3, #0
 80026a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a4:	2300      	movs	r3, #0
 80026a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ac:	4b79      	ldr	r3, [pc, #484]	; (8002894 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d00d      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x40>
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	f200 80e1 	bhi.w	8002880 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x34>
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x3a>
 80026c6:	e0db      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c8:	4b73      	ldr	r3, [pc, #460]	; (8002898 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026cc:	e0db      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ce:	4b73      	ldr	r3, [pc, #460]	; (800289c <HAL_RCC_GetSysClockFreq+0x208>)
 80026d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026d2:	e0d8      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d4:	4b6f      	ldr	r3, [pc, #444]	; (8002894 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026de:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d063      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ea:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	099b      	lsrs	r3, r3, #6
 80026f0:	2200      	movs	r2, #0
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
 80026fe:	2300      	movs	r3, #0
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
 8002702:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002706:	4622      	mov	r2, r4
 8002708:	462b      	mov	r3, r5
 800270a:	f04f 0000 	mov.w	r0, #0
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	0159      	lsls	r1, r3, #5
 8002714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002718:	0150      	lsls	r0, r2, #5
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4621      	mov	r1, r4
 8002720:	1a51      	subs	r1, r2, r1
 8002722:	6139      	str	r1, [r7, #16]
 8002724:	4629      	mov	r1, r5
 8002726:	eb63 0301 	sbc.w	r3, r3, r1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002738:	4659      	mov	r1, fp
 800273a:	018b      	lsls	r3, r1, #6
 800273c:	4651      	mov	r1, sl
 800273e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002742:	4651      	mov	r1, sl
 8002744:	018a      	lsls	r2, r1, #6
 8002746:	4651      	mov	r1, sl
 8002748:	ebb2 0801 	subs.w	r8, r2, r1
 800274c:	4659      	mov	r1, fp
 800274e:	eb63 0901 	sbc.w	r9, r3, r1
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800275e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002766:	4690      	mov	r8, r2
 8002768:	4699      	mov	r9, r3
 800276a:	4623      	mov	r3, r4
 800276c:	eb18 0303 	adds.w	r3, r8, r3
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	462b      	mov	r3, r5
 8002774:	eb49 0303 	adc.w	r3, r9, r3
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002786:	4629      	mov	r1, r5
 8002788:	024b      	lsls	r3, r1, #9
 800278a:	4621      	mov	r1, r4
 800278c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002790:	4621      	mov	r1, r4
 8002792:	024a      	lsls	r2, r1, #9
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279a:	2200      	movs	r2, #0
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
 800279e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027a4:	f7fd fd74 	bl	8000290 <__aeabi_uldivmod>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4613      	mov	r3, r2
 80027ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b0:	e058      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	099b      	lsrs	r3, r3, #6
 80027b8:	2200      	movs	r2, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	4611      	mov	r1, r2
 80027be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027c2:	623b      	str	r3, [r7, #32]
 80027c4:	2300      	movs	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
 80027c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027cc:	4642      	mov	r2, r8
 80027ce:	464b      	mov	r3, r9
 80027d0:	f04f 0000 	mov.w	r0, #0
 80027d4:	f04f 0100 	mov.w	r1, #0
 80027d8:	0159      	lsls	r1, r3, #5
 80027da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027de:	0150      	lsls	r0, r2, #5
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4641      	mov	r1, r8
 80027e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ea:	4649      	mov	r1, r9
 80027ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002800:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002804:	ebb2 040a 	subs.w	r4, r2, sl
 8002808:	eb63 050b 	sbc.w	r5, r3, fp
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	00eb      	lsls	r3, r5, #3
 8002816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800281a:	00e2      	lsls	r2, r4, #3
 800281c:	4614      	mov	r4, r2
 800281e:	461d      	mov	r5, r3
 8002820:	4643      	mov	r3, r8
 8002822:	18e3      	adds	r3, r4, r3
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	464b      	mov	r3, r9
 8002828:	eb45 0303 	adc.w	r3, r5, r3
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800283a:	4629      	mov	r1, r5
 800283c:	028b      	lsls	r3, r1, #10
 800283e:	4621      	mov	r1, r4
 8002840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002844:	4621      	mov	r1, r4
 8002846:	028a      	lsls	r2, r1, #10
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284e:	2200      	movs	r2, #0
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	61fa      	str	r2, [r7, #28]
 8002854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002858:	f7fd fd1a 	bl	8000290 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_GetSysClockFreq+0x200>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	3301      	adds	r3, #1
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800287e:	e002      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetSysClockFreq+0x204>)
 8002882:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002888:	4618      	mov	r0, r3
 800288a:	3750      	adds	r7, #80	; 0x50
 800288c:	46bd      	mov	sp, r7
 800288e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	00f42400 	.word	0x00f42400
 800289c:	007a1200 	.word	0x007a1200

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000000 	.word	0x20000000

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028bc:	f7ff fff0 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0a9b      	lsrs	r3, r3, #10
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4903      	ldr	r1, [pc, #12]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08003d34 	.word	0x08003d34

080028e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e4:	f7ff ffdc 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0b5b      	lsrs	r3, r3, #13
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4903      	ldr	r1, [pc, #12]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	08003d34 	.word	0x08003d34

08002908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e041      	b.n	800299e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fab6 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3304      	adds	r3, #4
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	f000 f888 	bl	8002a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d001      	beq.n	80029c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e03c      	b.n	8002a3a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a1e      	ldr	r2, [pc, #120]	; (8002a48 <HAL_TIM_Base_Start+0xa0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d018      	beq.n	8002a04 <HAL_TIM_Base_Start+0x5c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029da:	d013      	beq.n	8002a04 <HAL_TIM_Base_Start+0x5c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1a      	ldr	r2, [pc, #104]	; (8002a4c <HAL_TIM_Base_Start+0xa4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00e      	beq.n	8002a04 <HAL_TIM_Base_Start+0x5c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <HAL_TIM_Base_Start+0xa8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_TIM_Base_Start+0x5c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <HAL_TIM_Base_Start+0xac>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d004      	beq.n	8002a04 <HAL_TIM_Base_Start+0x5c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_TIM_Base_Start+0xb0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d010      	beq.n	8002a38 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a26:	e007      	b.n	8002a38 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40000c00 	.word	0x40000c00
 8002a58:	40014000 	.word	0x40014000

08002a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <TIM_Base_SetConfig+0xe4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00f      	beq.n	8002a94 <TIM_Base_SetConfig+0x38>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7a:	d00b      	beq.n	8002a94 <TIM_Base_SetConfig+0x38>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a31      	ldr	r2, [pc, #196]	; (8002b44 <TIM_Base_SetConfig+0xe8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d007      	beq.n	8002a94 <TIM_Base_SetConfig+0x38>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a30      	ldr	r2, [pc, #192]	; (8002b48 <TIM_Base_SetConfig+0xec>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d003      	beq.n	8002a94 <TIM_Base_SetConfig+0x38>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a2f      	ldr	r2, [pc, #188]	; (8002b4c <TIM_Base_SetConfig+0xf0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d108      	bne.n	8002aa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <TIM_Base_SetConfig+0xe4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01b      	beq.n	8002ae6 <TIM_Base_SetConfig+0x8a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d017      	beq.n	8002ae6 <TIM_Base_SetConfig+0x8a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <TIM_Base_SetConfig+0xe8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <TIM_Base_SetConfig+0x8a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <TIM_Base_SetConfig+0xec>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00f      	beq.n	8002ae6 <TIM_Base_SetConfig+0x8a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a20      	ldr	r2, [pc, #128]	; (8002b4c <TIM_Base_SetConfig+0xf0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00b      	beq.n	8002ae6 <TIM_Base_SetConfig+0x8a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <TIM_Base_SetConfig+0xf4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <TIM_Base_SetConfig+0x8a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <TIM_Base_SetConfig+0xf8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_Base_SetConfig+0x8a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <TIM_Base_SetConfig+0xfc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <TIM_Base_SetConfig+0xe4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d103      	bne.n	8002b2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	615a      	str	r2, [r3, #20]
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40014000 	.word	0x40014000
 8002b54:	40014400 	.word	0x40014400
 8002b58:	40014800 	.word	0x40014800

08002b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e03f      	b.n	8002bee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fe f9ae 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2224      	movs	r2, #36	; 0x24
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f929 	bl	8002df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b08a      	sub	sp, #40	; 0x28
 8002bfa:	af02      	add	r7, sp, #8
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d17c      	bne.n	8002d10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_UART_Transmit+0x2c>
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e075      	b.n	8002d12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_UART_Transmit+0x3e>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e06e      	b.n	8002d12 <HAL_UART_Transmit+0x11c>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2221      	movs	r2, #33	; 0x21
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c4a:	f7fe fa9d 	bl	8001188 <HAL_GetTick>
 8002c4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	88fa      	ldrh	r2, [r7, #6]
 8002c5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c64:	d108      	bne.n	8002c78 <HAL_UART_Transmit+0x82>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d104      	bne.n	8002c78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	e003      	b.n	8002c80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c88:	e02a      	b.n	8002ce0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2180      	movs	r1, #128	; 0x80
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f840 	bl	8002d1a <UART_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e036      	b.n	8002d12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	e007      	b.n	8002cd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1cf      	bne.n	8002c8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2140      	movs	r1, #64	; 0x40
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f810 	bl	8002d1a <UART_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e006      	b.n	8002d12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
  }
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b090      	sub	sp, #64	; 0x40
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2a:	e050      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d04c      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d3a:	f7fe fa25 	bl	8001188 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d241      	bcs.n	8002dce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	330c      	adds	r3, #12
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	e853 3f00 	ldrex	r3, [r3]
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d6a:	637a      	str	r2, [r7, #52]	; 0x34
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1e5      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3314      	adds	r3, #20
 8002d84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d9e:	623a      	str	r2, [r7, #32]
 8002da0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	69f9      	ldr	r1, [r7, #28]
 8002da4:	6a3a      	ldr	r2, [r7, #32]
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e5      	bne.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e00f      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	bf0c      	ite	eq
 8002dde:	2301      	moveq	r3, #1
 8002de0:	2300      	movne	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d09f      	beq.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3740      	adds	r7, #64	; 0x40
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dfc:	b0c0      	sub	sp, #256	; 0x100
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e14:	68d9      	ldr	r1, [r3, #12]
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	ea40 0301 	orr.w	r3, r0, r1
 8002e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e50:	f021 010c 	bic.w	r1, r1, #12
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e72:	6999      	ldr	r1, [r3, #24]
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	ea40 0301 	orr.w	r3, r0, r1
 8002e7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b8f      	ldr	r3, [pc, #572]	; (80030c4 <UART_SetConfig+0x2cc>)
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d005      	beq.n	8002e98 <UART_SetConfig+0xa0>
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b8d      	ldr	r3, [pc, #564]	; (80030c8 <UART_SetConfig+0x2d0>)
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d104      	bne.n	8002ea2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e98:	f7ff fd22 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8002e9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ea0:	e003      	b.n	8002eaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ea2:	f7ff fd09 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8002ea6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb4:	f040 810c 	bne.w	80030d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ec2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ec6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	1891      	adds	r1, r2, r2
 8002ed0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ed2:	415b      	adcs	r3, r3
 8002ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002eda:	4621      	mov	r1, r4
 8002edc:	eb12 0801 	adds.w	r8, r2, r1
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	eb43 0901 	adc.w	r9, r3, r1
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efa:	4690      	mov	r8, r2
 8002efc:	4699      	mov	r9, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	eb18 0303 	adds.w	r3, r8, r3
 8002f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f08:	462b      	mov	r3, r5
 8002f0a:	eb49 0303 	adc.w	r3, r9, r3
 8002f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f26:	460b      	mov	r3, r1
 8002f28:	18db      	adds	r3, r3, r3
 8002f2a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	eb42 0303 	adc.w	r3, r2, r3
 8002f32:	657b      	str	r3, [r7, #84]	; 0x54
 8002f34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f3c:	f7fd f9a8 	bl	8000290 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4b61      	ldr	r3, [pc, #388]	; (80030cc <UART_SetConfig+0x2d4>)
 8002f46:	fba3 2302 	umull	r2, r3, r3, r2
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	011c      	lsls	r4, r3, #4
 8002f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	1891      	adds	r1, r2, r2
 8002f66:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f68:	415b      	adcs	r3, r3
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f70:	4641      	mov	r1, r8
 8002f72:	eb12 0a01 	adds.w	sl, r2, r1
 8002f76:	4649      	mov	r1, r9
 8002f78:	eb43 0b01 	adc.w	fp, r3, r1
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f90:	4692      	mov	sl, r2
 8002f92:	469b      	mov	fp, r3
 8002f94:	4643      	mov	r3, r8
 8002f96:	eb1a 0303 	adds.w	r3, sl, r3
 8002f9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	18db      	adds	r3, r3, r3
 8002fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	eb42 0303 	adc.w	r3, r2, r3
 8002fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fd2:	f7fd f95d 	bl	8000290 <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <UART_SetConfig+0x2d4>)
 8002fde:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2264      	movs	r2, #100	; 0x64
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	1acb      	subs	r3, r1, r3
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ff2:	4b36      	ldr	r3, [pc, #216]	; (80030cc <UART_SetConfig+0x2d4>)
 8002ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003000:	441c      	add	r4, r3
 8003002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003006:	2200      	movs	r2, #0
 8003008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800300c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003010:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003014:	4642      	mov	r2, r8
 8003016:	464b      	mov	r3, r9
 8003018:	1891      	adds	r1, r2, r2
 800301a:	63b9      	str	r1, [r7, #56]	; 0x38
 800301c:	415b      	adcs	r3, r3
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003024:	4641      	mov	r1, r8
 8003026:	1851      	adds	r1, r2, r1
 8003028:	6339      	str	r1, [r7, #48]	; 0x30
 800302a:	4649      	mov	r1, r9
 800302c:	414b      	adcs	r3, r1
 800302e:	637b      	str	r3, [r7, #52]	; 0x34
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800303c:	4659      	mov	r1, fp
 800303e:	00cb      	lsls	r3, r1, #3
 8003040:	4651      	mov	r1, sl
 8003042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003046:	4651      	mov	r1, sl
 8003048:	00ca      	lsls	r2, r1, #3
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	4603      	mov	r3, r0
 8003050:	4642      	mov	r2, r8
 8003052:	189b      	adds	r3, r3, r2
 8003054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003058:	464b      	mov	r3, r9
 800305a:	460a      	mov	r2, r1
 800305c:	eb42 0303 	adc.w	r3, r2, r3
 8003060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003070:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003074:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003078:	460b      	mov	r3, r1
 800307a:	18db      	adds	r3, r3, r3
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
 800307e:	4613      	mov	r3, r2
 8003080:	eb42 0303 	adc.w	r3, r2, r3
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800308a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800308e:	f7fd f8ff 	bl	8000290 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <UART_SetConfig+0x2d4>)
 8003098:	fba3 1302 	umull	r1, r3, r3, r2
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	2164      	movs	r1, #100	; 0x64
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	3332      	adds	r3, #50	; 0x32
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <UART_SetConfig+0x2d4>)
 80030ac:	fba2 2303 	umull	r2, r3, r2, r3
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4422      	add	r2, r4
 80030be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030c0:	e105      	b.n	80032ce <UART_SetConfig+0x4d6>
 80030c2:	bf00      	nop
 80030c4:	40011000 	.word	0x40011000
 80030c8:	40011400 	.word	0x40011400
 80030cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030e2:	4642      	mov	r2, r8
 80030e4:	464b      	mov	r3, r9
 80030e6:	1891      	adds	r1, r2, r2
 80030e8:	6239      	str	r1, [r7, #32]
 80030ea:	415b      	adcs	r3, r3
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030f2:	4641      	mov	r1, r8
 80030f4:	1854      	adds	r4, r2, r1
 80030f6:	4649      	mov	r1, r9
 80030f8:	eb43 0501 	adc.w	r5, r3, r1
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	00eb      	lsls	r3, r5, #3
 8003106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800310a:	00e2      	lsls	r2, r4, #3
 800310c:	4614      	mov	r4, r2
 800310e:	461d      	mov	r5, r3
 8003110:	4643      	mov	r3, r8
 8003112:	18e3      	adds	r3, r4, r3
 8003114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003118:	464b      	mov	r3, r9
 800311a:	eb45 0303 	adc.w	r3, r5, r3
 800311e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800312e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800313e:	4629      	mov	r1, r5
 8003140:	008b      	lsls	r3, r1, #2
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003148:	4621      	mov	r1, r4
 800314a:	008a      	lsls	r2, r1, #2
 800314c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003150:	f7fd f89e 	bl	8000290 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4b60      	ldr	r3, [pc, #384]	; (80032dc <UART_SetConfig+0x4e4>)
 800315a:	fba3 2302 	umull	r2, r3, r3, r2
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	011c      	lsls	r4, r3, #4
 8003162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003166:	2200      	movs	r2, #0
 8003168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800316c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003170:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003174:	4642      	mov	r2, r8
 8003176:	464b      	mov	r3, r9
 8003178:	1891      	adds	r1, r2, r2
 800317a:	61b9      	str	r1, [r7, #24]
 800317c:	415b      	adcs	r3, r3
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003184:	4641      	mov	r1, r8
 8003186:	1851      	adds	r1, r2, r1
 8003188:	6139      	str	r1, [r7, #16]
 800318a:	4649      	mov	r1, r9
 800318c:	414b      	adcs	r3, r1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800319c:	4659      	mov	r1, fp
 800319e:	00cb      	lsls	r3, r1, #3
 80031a0:	4651      	mov	r1, sl
 80031a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a6:	4651      	mov	r1, sl
 80031a8:	00ca      	lsls	r2, r1, #3
 80031aa:	4610      	mov	r0, r2
 80031ac:	4619      	mov	r1, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	4642      	mov	r2, r8
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031b8:	464b      	mov	r3, r9
 80031ba:	460a      	mov	r2, r1
 80031bc:	eb42 0303 	adc.w	r3, r2, r3
 80031c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80031ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031dc:	4649      	mov	r1, r9
 80031de:	008b      	lsls	r3, r1, #2
 80031e0:	4641      	mov	r1, r8
 80031e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e6:	4641      	mov	r1, r8
 80031e8:	008a      	lsls	r2, r1, #2
 80031ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031ee:	f7fd f84f 	bl	8000290 <__aeabi_uldivmod>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4b39      	ldr	r3, [pc, #228]	; (80032dc <UART_SetConfig+0x4e4>)
 80031f8:	fba3 1302 	umull	r1, r3, r3, r2
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	2164      	movs	r1, #100	; 0x64
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	3332      	adds	r3, #50	; 0x32
 800320a:	4a34      	ldr	r2, [pc, #208]	; (80032dc <UART_SetConfig+0x4e4>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003216:	441c      	add	r4, r3
 8003218:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321c:	2200      	movs	r2, #0
 800321e:	673b      	str	r3, [r7, #112]	; 0x70
 8003220:	677a      	str	r2, [r7, #116]	; 0x74
 8003222:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003226:	4642      	mov	r2, r8
 8003228:	464b      	mov	r3, r9
 800322a:	1891      	adds	r1, r2, r2
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	415b      	adcs	r3, r3
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003236:	4641      	mov	r1, r8
 8003238:	1851      	adds	r1, r2, r1
 800323a:	6039      	str	r1, [r7, #0]
 800323c:	4649      	mov	r1, r9
 800323e:	414b      	adcs	r3, r1
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800324e:	4659      	mov	r1, fp
 8003250:	00cb      	lsls	r3, r1, #3
 8003252:	4651      	mov	r1, sl
 8003254:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003258:	4651      	mov	r1, sl
 800325a:	00ca      	lsls	r2, r1, #3
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	4603      	mov	r3, r0
 8003262:	4642      	mov	r2, r8
 8003264:	189b      	adds	r3, r3, r2
 8003266:	66bb      	str	r3, [r7, #104]	; 0x68
 8003268:	464b      	mov	r3, r9
 800326a:	460a      	mov	r2, r1
 800326c:	eb42 0303 	adc.w	r3, r2, r3
 8003270:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	663b      	str	r3, [r7, #96]	; 0x60
 800327c:	667a      	str	r2, [r7, #100]	; 0x64
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800328a:	4649      	mov	r1, r9
 800328c:	008b      	lsls	r3, r1, #2
 800328e:	4641      	mov	r1, r8
 8003290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003294:	4641      	mov	r1, r8
 8003296:	008a      	lsls	r2, r1, #2
 8003298:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800329c:	f7fc fff8 	bl	8000290 <__aeabi_uldivmod>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <UART_SetConfig+0x4e4>)
 80032a6:	fba3 1302 	umull	r1, r3, r3, r2
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2164      	movs	r1, #100	; 0x64
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	3332      	adds	r3, #50	; 0x32
 80032b8:	4a08      	ldr	r2, [pc, #32]	; (80032dc <UART_SetConfig+0x4e4>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	f003 020f 	and.w	r2, r3, #15
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4422      	add	r2, r4
 80032cc:	609a      	str	r2, [r3, #8]
}
 80032ce:	bf00      	nop
 80032d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032d4:	46bd      	mov	sp, r7
 80032d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032da:	bf00      	nop
 80032dc:	51eb851f 	.word	0x51eb851f

080032e0 <__errno>:
 80032e0:	4b01      	ldr	r3, [pc, #4]	; (80032e8 <__errno+0x8>)
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	2000000c 	.word	0x2000000c

080032ec <__libc_init_array>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	4d0d      	ldr	r5, [pc, #52]	; (8003324 <__libc_init_array+0x38>)
 80032f0:	4c0d      	ldr	r4, [pc, #52]	; (8003328 <__libc_init_array+0x3c>)
 80032f2:	1b64      	subs	r4, r4, r5
 80032f4:	10a4      	asrs	r4, r4, #2
 80032f6:	2600      	movs	r6, #0
 80032f8:	42a6      	cmp	r6, r4
 80032fa:	d109      	bne.n	8003310 <__libc_init_array+0x24>
 80032fc:	4d0b      	ldr	r5, [pc, #44]	; (800332c <__libc_init_array+0x40>)
 80032fe:	4c0c      	ldr	r4, [pc, #48]	; (8003330 <__libc_init_array+0x44>)
 8003300:	f000 fc8e 	bl	8003c20 <_init>
 8003304:	1b64      	subs	r4, r4, r5
 8003306:	10a4      	asrs	r4, r4, #2
 8003308:	2600      	movs	r6, #0
 800330a:	42a6      	cmp	r6, r4
 800330c:	d105      	bne.n	800331a <__libc_init_array+0x2e>
 800330e:	bd70      	pop	{r4, r5, r6, pc}
 8003310:	f855 3b04 	ldr.w	r3, [r5], #4
 8003314:	4798      	blx	r3
 8003316:	3601      	adds	r6, #1
 8003318:	e7ee      	b.n	80032f8 <__libc_init_array+0xc>
 800331a:	f855 3b04 	ldr.w	r3, [r5], #4
 800331e:	4798      	blx	r3
 8003320:	3601      	adds	r6, #1
 8003322:	e7f2      	b.n	800330a <__libc_init_array+0x1e>
 8003324:	08003d78 	.word	0x08003d78
 8003328:	08003d78 	.word	0x08003d78
 800332c:	08003d78 	.word	0x08003d78
 8003330:	08003d7c 	.word	0x08003d7c

08003334 <memset>:
 8003334:	4402      	add	r2, r0
 8003336:	4603      	mov	r3, r0
 8003338:	4293      	cmp	r3, r2
 800333a:	d100      	bne.n	800333e <memset+0xa>
 800333c:	4770      	bx	lr
 800333e:	f803 1b01 	strb.w	r1, [r3], #1
 8003342:	e7f9      	b.n	8003338 <memset+0x4>

08003344 <siprintf>:
 8003344:	b40e      	push	{r1, r2, r3}
 8003346:	b500      	push	{lr}
 8003348:	b09c      	sub	sp, #112	; 0x70
 800334a:	ab1d      	add	r3, sp, #116	; 0x74
 800334c:	9002      	str	r0, [sp, #8]
 800334e:	9006      	str	r0, [sp, #24]
 8003350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003354:	4809      	ldr	r0, [pc, #36]	; (800337c <siprintf+0x38>)
 8003356:	9107      	str	r1, [sp, #28]
 8003358:	9104      	str	r1, [sp, #16]
 800335a:	4909      	ldr	r1, [pc, #36]	; (8003380 <siprintf+0x3c>)
 800335c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003360:	9105      	str	r1, [sp, #20]
 8003362:	6800      	ldr	r0, [r0, #0]
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	a902      	add	r1, sp, #8
 8003368:	f000 f868 	bl	800343c <_svfiprintf_r>
 800336c:	9b02      	ldr	r3, [sp, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	b01c      	add	sp, #112	; 0x70
 8003374:	f85d eb04 	ldr.w	lr, [sp], #4
 8003378:	b003      	add	sp, #12
 800337a:	4770      	bx	lr
 800337c:	2000000c 	.word	0x2000000c
 8003380:	ffff0208 	.word	0xffff0208

08003384 <__ssputs_r>:
 8003384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003388:	688e      	ldr	r6, [r1, #8]
 800338a:	429e      	cmp	r6, r3
 800338c:	4682      	mov	sl, r0
 800338e:	460c      	mov	r4, r1
 8003390:	4690      	mov	r8, r2
 8003392:	461f      	mov	r7, r3
 8003394:	d838      	bhi.n	8003408 <__ssputs_r+0x84>
 8003396:	898a      	ldrh	r2, [r1, #12]
 8003398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800339c:	d032      	beq.n	8003404 <__ssputs_r+0x80>
 800339e:	6825      	ldr	r5, [r4, #0]
 80033a0:	6909      	ldr	r1, [r1, #16]
 80033a2:	eba5 0901 	sub.w	r9, r5, r1
 80033a6:	6965      	ldr	r5, [r4, #20]
 80033a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033b0:	3301      	adds	r3, #1
 80033b2:	444b      	add	r3, r9
 80033b4:	106d      	asrs	r5, r5, #1
 80033b6:	429d      	cmp	r5, r3
 80033b8:	bf38      	it	cc
 80033ba:	461d      	movcc	r5, r3
 80033bc:	0553      	lsls	r3, r2, #21
 80033be:	d531      	bpl.n	8003424 <__ssputs_r+0xa0>
 80033c0:	4629      	mov	r1, r5
 80033c2:	f000 fb63 	bl	8003a8c <_malloc_r>
 80033c6:	4606      	mov	r6, r0
 80033c8:	b950      	cbnz	r0, 80033e0 <__ssputs_r+0x5c>
 80033ca:	230c      	movs	r3, #12
 80033cc:	f8ca 3000 	str.w	r3, [sl]
 80033d0:	89a3      	ldrh	r3, [r4, #12]
 80033d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d6:	81a3      	strh	r3, [r4, #12]
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e0:	6921      	ldr	r1, [r4, #16]
 80033e2:	464a      	mov	r2, r9
 80033e4:	f000 fabe 	bl	8003964 <memcpy>
 80033e8:	89a3      	ldrh	r3, [r4, #12]
 80033ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f2:	81a3      	strh	r3, [r4, #12]
 80033f4:	6126      	str	r6, [r4, #16]
 80033f6:	6165      	str	r5, [r4, #20]
 80033f8:	444e      	add	r6, r9
 80033fa:	eba5 0509 	sub.w	r5, r5, r9
 80033fe:	6026      	str	r6, [r4, #0]
 8003400:	60a5      	str	r5, [r4, #8]
 8003402:	463e      	mov	r6, r7
 8003404:	42be      	cmp	r6, r7
 8003406:	d900      	bls.n	800340a <__ssputs_r+0x86>
 8003408:	463e      	mov	r6, r7
 800340a:	6820      	ldr	r0, [r4, #0]
 800340c:	4632      	mov	r2, r6
 800340e:	4641      	mov	r1, r8
 8003410:	f000 fab6 	bl	8003980 <memmove>
 8003414:	68a3      	ldr	r3, [r4, #8]
 8003416:	1b9b      	subs	r3, r3, r6
 8003418:	60a3      	str	r3, [r4, #8]
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	4433      	add	r3, r6
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	2000      	movs	r0, #0
 8003422:	e7db      	b.n	80033dc <__ssputs_r+0x58>
 8003424:	462a      	mov	r2, r5
 8003426:	f000 fba5 	bl	8003b74 <_realloc_r>
 800342a:	4606      	mov	r6, r0
 800342c:	2800      	cmp	r0, #0
 800342e:	d1e1      	bne.n	80033f4 <__ssputs_r+0x70>
 8003430:	6921      	ldr	r1, [r4, #16]
 8003432:	4650      	mov	r0, sl
 8003434:	f000 fabe 	bl	80039b4 <_free_r>
 8003438:	e7c7      	b.n	80033ca <__ssputs_r+0x46>
	...

0800343c <_svfiprintf_r>:
 800343c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003440:	4698      	mov	r8, r3
 8003442:	898b      	ldrh	r3, [r1, #12]
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	b09d      	sub	sp, #116	; 0x74
 8003448:	4607      	mov	r7, r0
 800344a:	460d      	mov	r5, r1
 800344c:	4614      	mov	r4, r2
 800344e:	d50e      	bpl.n	800346e <_svfiprintf_r+0x32>
 8003450:	690b      	ldr	r3, [r1, #16]
 8003452:	b963      	cbnz	r3, 800346e <_svfiprintf_r+0x32>
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	f000 fb19 	bl	8003a8c <_malloc_r>
 800345a:	6028      	str	r0, [r5, #0]
 800345c:	6128      	str	r0, [r5, #16]
 800345e:	b920      	cbnz	r0, 800346a <_svfiprintf_r+0x2e>
 8003460:	230c      	movs	r3, #12
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	e0d1      	b.n	800360e <_svfiprintf_r+0x1d2>
 800346a:	2340      	movs	r3, #64	; 0x40
 800346c:	616b      	str	r3, [r5, #20]
 800346e:	2300      	movs	r3, #0
 8003470:	9309      	str	r3, [sp, #36]	; 0x24
 8003472:	2320      	movs	r3, #32
 8003474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003478:	f8cd 800c 	str.w	r8, [sp, #12]
 800347c:	2330      	movs	r3, #48	; 0x30
 800347e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003628 <_svfiprintf_r+0x1ec>
 8003482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003486:	f04f 0901 	mov.w	r9, #1
 800348a:	4623      	mov	r3, r4
 800348c:	469a      	mov	sl, r3
 800348e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003492:	b10a      	cbz	r2, 8003498 <_svfiprintf_r+0x5c>
 8003494:	2a25      	cmp	r2, #37	; 0x25
 8003496:	d1f9      	bne.n	800348c <_svfiprintf_r+0x50>
 8003498:	ebba 0b04 	subs.w	fp, sl, r4
 800349c:	d00b      	beq.n	80034b6 <_svfiprintf_r+0x7a>
 800349e:	465b      	mov	r3, fp
 80034a0:	4622      	mov	r2, r4
 80034a2:	4629      	mov	r1, r5
 80034a4:	4638      	mov	r0, r7
 80034a6:	f7ff ff6d 	bl	8003384 <__ssputs_r>
 80034aa:	3001      	adds	r0, #1
 80034ac:	f000 80aa 	beq.w	8003604 <_svfiprintf_r+0x1c8>
 80034b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034b2:	445a      	add	r2, fp
 80034b4:	9209      	str	r2, [sp, #36]	; 0x24
 80034b6:	f89a 3000 	ldrb.w	r3, [sl]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80a2 	beq.w	8003604 <_svfiprintf_r+0x1c8>
 80034c0:	2300      	movs	r3, #0
 80034c2:	f04f 32ff 	mov.w	r2, #4294967295
 80034c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034ca:	f10a 0a01 	add.w	sl, sl, #1
 80034ce:	9304      	str	r3, [sp, #16]
 80034d0:	9307      	str	r3, [sp, #28]
 80034d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034d6:	931a      	str	r3, [sp, #104]	; 0x68
 80034d8:	4654      	mov	r4, sl
 80034da:	2205      	movs	r2, #5
 80034dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034e0:	4851      	ldr	r0, [pc, #324]	; (8003628 <_svfiprintf_r+0x1ec>)
 80034e2:	f7fc fe85 	bl	80001f0 <memchr>
 80034e6:	9a04      	ldr	r2, [sp, #16]
 80034e8:	b9d8      	cbnz	r0, 8003522 <_svfiprintf_r+0xe6>
 80034ea:	06d0      	lsls	r0, r2, #27
 80034ec:	bf44      	itt	mi
 80034ee:	2320      	movmi	r3, #32
 80034f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034f4:	0711      	lsls	r1, r2, #28
 80034f6:	bf44      	itt	mi
 80034f8:	232b      	movmi	r3, #43	; 0x2b
 80034fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003502:	2b2a      	cmp	r3, #42	; 0x2a
 8003504:	d015      	beq.n	8003532 <_svfiprintf_r+0xf6>
 8003506:	9a07      	ldr	r2, [sp, #28]
 8003508:	4654      	mov	r4, sl
 800350a:	2000      	movs	r0, #0
 800350c:	f04f 0c0a 	mov.w	ip, #10
 8003510:	4621      	mov	r1, r4
 8003512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003516:	3b30      	subs	r3, #48	; 0x30
 8003518:	2b09      	cmp	r3, #9
 800351a:	d94e      	bls.n	80035ba <_svfiprintf_r+0x17e>
 800351c:	b1b0      	cbz	r0, 800354c <_svfiprintf_r+0x110>
 800351e:	9207      	str	r2, [sp, #28]
 8003520:	e014      	b.n	800354c <_svfiprintf_r+0x110>
 8003522:	eba0 0308 	sub.w	r3, r0, r8
 8003526:	fa09 f303 	lsl.w	r3, r9, r3
 800352a:	4313      	orrs	r3, r2
 800352c:	9304      	str	r3, [sp, #16]
 800352e:	46a2      	mov	sl, r4
 8003530:	e7d2      	b.n	80034d8 <_svfiprintf_r+0x9c>
 8003532:	9b03      	ldr	r3, [sp, #12]
 8003534:	1d19      	adds	r1, r3, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	9103      	str	r1, [sp, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	bfbb      	ittet	lt
 800353e:	425b      	neglt	r3, r3
 8003540:	f042 0202 	orrlt.w	r2, r2, #2
 8003544:	9307      	strge	r3, [sp, #28]
 8003546:	9307      	strlt	r3, [sp, #28]
 8003548:	bfb8      	it	lt
 800354a:	9204      	strlt	r2, [sp, #16]
 800354c:	7823      	ldrb	r3, [r4, #0]
 800354e:	2b2e      	cmp	r3, #46	; 0x2e
 8003550:	d10c      	bne.n	800356c <_svfiprintf_r+0x130>
 8003552:	7863      	ldrb	r3, [r4, #1]
 8003554:	2b2a      	cmp	r3, #42	; 0x2a
 8003556:	d135      	bne.n	80035c4 <_svfiprintf_r+0x188>
 8003558:	9b03      	ldr	r3, [sp, #12]
 800355a:	1d1a      	adds	r2, r3, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	9203      	str	r2, [sp, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	bfb8      	it	lt
 8003564:	f04f 33ff 	movlt.w	r3, #4294967295
 8003568:	3402      	adds	r4, #2
 800356a:	9305      	str	r3, [sp, #20]
 800356c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003638 <_svfiprintf_r+0x1fc>
 8003570:	7821      	ldrb	r1, [r4, #0]
 8003572:	2203      	movs	r2, #3
 8003574:	4650      	mov	r0, sl
 8003576:	f7fc fe3b 	bl	80001f0 <memchr>
 800357a:	b140      	cbz	r0, 800358e <_svfiprintf_r+0x152>
 800357c:	2340      	movs	r3, #64	; 0x40
 800357e:	eba0 000a 	sub.w	r0, r0, sl
 8003582:	fa03 f000 	lsl.w	r0, r3, r0
 8003586:	9b04      	ldr	r3, [sp, #16]
 8003588:	4303      	orrs	r3, r0
 800358a:	3401      	adds	r4, #1
 800358c:	9304      	str	r3, [sp, #16]
 800358e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003592:	4826      	ldr	r0, [pc, #152]	; (800362c <_svfiprintf_r+0x1f0>)
 8003594:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003598:	2206      	movs	r2, #6
 800359a:	f7fc fe29 	bl	80001f0 <memchr>
 800359e:	2800      	cmp	r0, #0
 80035a0:	d038      	beq.n	8003614 <_svfiprintf_r+0x1d8>
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <_svfiprintf_r+0x1f4>)
 80035a4:	bb1b      	cbnz	r3, 80035ee <_svfiprintf_r+0x1b2>
 80035a6:	9b03      	ldr	r3, [sp, #12]
 80035a8:	3307      	adds	r3, #7
 80035aa:	f023 0307 	bic.w	r3, r3, #7
 80035ae:	3308      	adds	r3, #8
 80035b0:	9303      	str	r3, [sp, #12]
 80035b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035b4:	4433      	add	r3, r6
 80035b6:	9309      	str	r3, [sp, #36]	; 0x24
 80035b8:	e767      	b.n	800348a <_svfiprintf_r+0x4e>
 80035ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80035be:	460c      	mov	r4, r1
 80035c0:	2001      	movs	r0, #1
 80035c2:	e7a5      	b.n	8003510 <_svfiprintf_r+0xd4>
 80035c4:	2300      	movs	r3, #0
 80035c6:	3401      	adds	r4, #1
 80035c8:	9305      	str	r3, [sp, #20]
 80035ca:	4619      	mov	r1, r3
 80035cc:	f04f 0c0a 	mov.w	ip, #10
 80035d0:	4620      	mov	r0, r4
 80035d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035d6:	3a30      	subs	r2, #48	; 0x30
 80035d8:	2a09      	cmp	r2, #9
 80035da:	d903      	bls.n	80035e4 <_svfiprintf_r+0x1a8>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0c5      	beq.n	800356c <_svfiprintf_r+0x130>
 80035e0:	9105      	str	r1, [sp, #20]
 80035e2:	e7c3      	b.n	800356c <_svfiprintf_r+0x130>
 80035e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80035e8:	4604      	mov	r4, r0
 80035ea:	2301      	movs	r3, #1
 80035ec:	e7f0      	b.n	80035d0 <_svfiprintf_r+0x194>
 80035ee:	ab03      	add	r3, sp, #12
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	462a      	mov	r2, r5
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <_svfiprintf_r+0x1f8>)
 80035f6:	a904      	add	r1, sp, #16
 80035f8:	4638      	mov	r0, r7
 80035fa:	f3af 8000 	nop.w
 80035fe:	1c42      	adds	r2, r0, #1
 8003600:	4606      	mov	r6, r0
 8003602:	d1d6      	bne.n	80035b2 <_svfiprintf_r+0x176>
 8003604:	89ab      	ldrh	r3, [r5, #12]
 8003606:	065b      	lsls	r3, r3, #25
 8003608:	f53f af2c 	bmi.w	8003464 <_svfiprintf_r+0x28>
 800360c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800360e:	b01d      	add	sp, #116	; 0x74
 8003610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003614:	ab03      	add	r3, sp, #12
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	462a      	mov	r2, r5
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <_svfiprintf_r+0x1f8>)
 800361c:	a904      	add	r1, sp, #16
 800361e:	4638      	mov	r0, r7
 8003620:	f000 f87a 	bl	8003718 <_printf_i>
 8003624:	e7eb      	b.n	80035fe <_svfiprintf_r+0x1c2>
 8003626:	bf00      	nop
 8003628:	08003d3c 	.word	0x08003d3c
 800362c:	08003d46 	.word	0x08003d46
 8003630:	00000000 	.word	0x00000000
 8003634:	08003385 	.word	0x08003385
 8003638:	08003d42 	.word	0x08003d42

0800363c <_printf_common>:
 800363c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003640:	4616      	mov	r6, r2
 8003642:	4699      	mov	r9, r3
 8003644:	688a      	ldr	r2, [r1, #8]
 8003646:	690b      	ldr	r3, [r1, #16]
 8003648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800364c:	4293      	cmp	r3, r2
 800364e:	bfb8      	it	lt
 8003650:	4613      	movlt	r3, r2
 8003652:	6033      	str	r3, [r6, #0]
 8003654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003658:	4607      	mov	r7, r0
 800365a:	460c      	mov	r4, r1
 800365c:	b10a      	cbz	r2, 8003662 <_printf_common+0x26>
 800365e:	3301      	adds	r3, #1
 8003660:	6033      	str	r3, [r6, #0]
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	0699      	lsls	r1, r3, #26
 8003666:	bf42      	ittt	mi
 8003668:	6833      	ldrmi	r3, [r6, #0]
 800366a:	3302      	addmi	r3, #2
 800366c:	6033      	strmi	r3, [r6, #0]
 800366e:	6825      	ldr	r5, [r4, #0]
 8003670:	f015 0506 	ands.w	r5, r5, #6
 8003674:	d106      	bne.n	8003684 <_printf_common+0x48>
 8003676:	f104 0a19 	add.w	sl, r4, #25
 800367a:	68e3      	ldr	r3, [r4, #12]
 800367c:	6832      	ldr	r2, [r6, #0]
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	42ab      	cmp	r3, r5
 8003682:	dc26      	bgt.n	80036d2 <_printf_common+0x96>
 8003684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003688:	1e13      	subs	r3, r2, #0
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	bf18      	it	ne
 800368e:	2301      	movne	r3, #1
 8003690:	0692      	lsls	r2, r2, #26
 8003692:	d42b      	bmi.n	80036ec <_printf_common+0xb0>
 8003694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003698:	4649      	mov	r1, r9
 800369a:	4638      	mov	r0, r7
 800369c:	47c0      	blx	r8
 800369e:	3001      	adds	r0, #1
 80036a0:	d01e      	beq.n	80036e0 <_printf_common+0xa4>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	68e5      	ldr	r5, [r4, #12]
 80036a6:	6832      	ldr	r2, [r6, #0]
 80036a8:	f003 0306 	and.w	r3, r3, #6
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	bf08      	it	eq
 80036b0:	1aad      	subeq	r5, r5, r2
 80036b2:	68a3      	ldr	r3, [r4, #8]
 80036b4:	6922      	ldr	r2, [r4, #16]
 80036b6:	bf0c      	ite	eq
 80036b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036bc:	2500      	movne	r5, #0
 80036be:	4293      	cmp	r3, r2
 80036c0:	bfc4      	itt	gt
 80036c2:	1a9b      	subgt	r3, r3, r2
 80036c4:	18ed      	addgt	r5, r5, r3
 80036c6:	2600      	movs	r6, #0
 80036c8:	341a      	adds	r4, #26
 80036ca:	42b5      	cmp	r5, r6
 80036cc:	d11a      	bne.n	8003704 <_printf_common+0xc8>
 80036ce:	2000      	movs	r0, #0
 80036d0:	e008      	b.n	80036e4 <_printf_common+0xa8>
 80036d2:	2301      	movs	r3, #1
 80036d4:	4652      	mov	r2, sl
 80036d6:	4649      	mov	r1, r9
 80036d8:	4638      	mov	r0, r7
 80036da:	47c0      	blx	r8
 80036dc:	3001      	adds	r0, #1
 80036de:	d103      	bne.n	80036e8 <_printf_common+0xac>
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e8:	3501      	adds	r5, #1
 80036ea:	e7c6      	b.n	800367a <_printf_common+0x3e>
 80036ec:	18e1      	adds	r1, r4, r3
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	2030      	movs	r0, #48	; 0x30
 80036f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036f6:	4422      	add	r2, r4
 80036f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003700:	3302      	adds	r3, #2
 8003702:	e7c7      	b.n	8003694 <_printf_common+0x58>
 8003704:	2301      	movs	r3, #1
 8003706:	4622      	mov	r2, r4
 8003708:	4649      	mov	r1, r9
 800370a:	4638      	mov	r0, r7
 800370c:	47c0      	blx	r8
 800370e:	3001      	adds	r0, #1
 8003710:	d0e6      	beq.n	80036e0 <_printf_common+0xa4>
 8003712:	3601      	adds	r6, #1
 8003714:	e7d9      	b.n	80036ca <_printf_common+0x8e>
	...

08003718 <_printf_i>:
 8003718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800371c:	7e0f      	ldrb	r7, [r1, #24]
 800371e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003720:	2f78      	cmp	r7, #120	; 0x78
 8003722:	4691      	mov	r9, r2
 8003724:	4680      	mov	r8, r0
 8003726:	460c      	mov	r4, r1
 8003728:	469a      	mov	sl, r3
 800372a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800372e:	d807      	bhi.n	8003740 <_printf_i+0x28>
 8003730:	2f62      	cmp	r7, #98	; 0x62
 8003732:	d80a      	bhi.n	800374a <_printf_i+0x32>
 8003734:	2f00      	cmp	r7, #0
 8003736:	f000 80d8 	beq.w	80038ea <_printf_i+0x1d2>
 800373a:	2f58      	cmp	r7, #88	; 0x58
 800373c:	f000 80a3 	beq.w	8003886 <_printf_i+0x16e>
 8003740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003748:	e03a      	b.n	80037c0 <_printf_i+0xa8>
 800374a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800374e:	2b15      	cmp	r3, #21
 8003750:	d8f6      	bhi.n	8003740 <_printf_i+0x28>
 8003752:	a101      	add	r1, pc, #4	; (adr r1, 8003758 <_printf_i+0x40>)
 8003754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003758:	080037b1 	.word	0x080037b1
 800375c:	080037c5 	.word	0x080037c5
 8003760:	08003741 	.word	0x08003741
 8003764:	08003741 	.word	0x08003741
 8003768:	08003741 	.word	0x08003741
 800376c:	08003741 	.word	0x08003741
 8003770:	080037c5 	.word	0x080037c5
 8003774:	08003741 	.word	0x08003741
 8003778:	08003741 	.word	0x08003741
 800377c:	08003741 	.word	0x08003741
 8003780:	08003741 	.word	0x08003741
 8003784:	080038d1 	.word	0x080038d1
 8003788:	080037f5 	.word	0x080037f5
 800378c:	080038b3 	.word	0x080038b3
 8003790:	08003741 	.word	0x08003741
 8003794:	08003741 	.word	0x08003741
 8003798:	080038f3 	.word	0x080038f3
 800379c:	08003741 	.word	0x08003741
 80037a0:	080037f5 	.word	0x080037f5
 80037a4:	08003741 	.word	0x08003741
 80037a8:	08003741 	.word	0x08003741
 80037ac:	080038bb 	.word	0x080038bb
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	1d1a      	adds	r2, r3, #4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	602a      	str	r2, [r5, #0]
 80037b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0a3      	b.n	800390c <_printf_i+0x1f4>
 80037c4:	6820      	ldr	r0, [r4, #0]
 80037c6:	6829      	ldr	r1, [r5, #0]
 80037c8:	0606      	lsls	r6, r0, #24
 80037ca:	f101 0304 	add.w	r3, r1, #4
 80037ce:	d50a      	bpl.n	80037e6 <_printf_i+0xce>
 80037d0:	680e      	ldr	r6, [r1, #0]
 80037d2:	602b      	str	r3, [r5, #0]
 80037d4:	2e00      	cmp	r6, #0
 80037d6:	da03      	bge.n	80037e0 <_printf_i+0xc8>
 80037d8:	232d      	movs	r3, #45	; 0x2d
 80037da:	4276      	negs	r6, r6
 80037dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037e0:	485e      	ldr	r0, [pc, #376]	; (800395c <_printf_i+0x244>)
 80037e2:	230a      	movs	r3, #10
 80037e4:	e019      	b.n	800381a <_printf_i+0x102>
 80037e6:	680e      	ldr	r6, [r1, #0]
 80037e8:	602b      	str	r3, [r5, #0]
 80037ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037ee:	bf18      	it	ne
 80037f0:	b236      	sxthne	r6, r6
 80037f2:	e7ef      	b.n	80037d4 <_printf_i+0xbc>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	6820      	ldr	r0, [r4, #0]
 80037f8:	1d19      	adds	r1, r3, #4
 80037fa:	6029      	str	r1, [r5, #0]
 80037fc:	0601      	lsls	r1, r0, #24
 80037fe:	d501      	bpl.n	8003804 <_printf_i+0xec>
 8003800:	681e      	ldr	r6, [r3, #0]
 8003802:	e002      	b.n	800380a <_printf_i+0xf2>
 8003804:	0646      	lsls	r6, r0, #25
 8003806:	d5fb      	bpl.n	8003800 <_printf_i+0xe8>
 8003808:	881e      	ldrh	r6, [r3, #0]
 800380a:	4854      	ldr	r0, [pc, #336]	; (800395c <_printf_i+0x244>)
 800380c:	2f6f      	cmp	r7, #111	; 0x6f
 800380e:	bf0c      	ite	eq
 8003810:	2308      	moveq	r3, #8
 8003812:	230a      	movne	r3, #10
 8003814:	2100      	movs	r1, #0
 8003816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800381a:	6865      	ldr	r5, [r4, #4]
 800381c:	60a5      	str	r5, [r4, #8]
 800381e:	2d00      	cmp	r5, #0
 8003820:	bfa2      	ittt	ge
 8003822:	6821      	ldrge	r1, [r4, #0]
 8003824:	f021 0104 	bicge.w	r1, r1, #4
 8003828:	6021      	strge	r1, [r4, #0]
 800382a:	b90e      	cbnz	r6, 8003830 <_printf_i+0x118>
 800382c:	2d00      	cmp	r5, #0
 800382e:	d04d      	beq.n	80038cc <_printf_i+0x1b4>
 8003830:	4615      	mov	r5, r2
 8003832:	fbb6 f1f3 	udiv	r1, r6, r3
 8003836:	fb03 6711 	mls	r7, r3, r1, r6
 800383a:	5dc7      	ldrb	r7, [r0, r7]
 800383c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003840:	4637      	mov	r7, r6
 8003842:	42bb      	cmp	r3, r7
 8003844:	460e      	mov	r6, r1
 8003846:	d9f4      	bls.n	8003832 <_printf_i+0x11a>
 8003848:	2b08      	cmp	r3, #8
 800384a:	d10b      	bne.n	8003864 <_printf_i+0x14c>
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	07de      	lsls	r6, r3, #31
 8003850:	d508      	bpl.n	8003864 <_printf_i+0x14c>
 8003852:	6923      	ldr	r3, [r4, #16]
 8003854:	6861      	ldr	r1, [r4, #4]
 8003856:	4299      	cmp	r1, r3
 8003858:	bfde      	ittt	le
 800385a:	2330      	movle	r3, #48	; 0x30
 800385c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003860:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003864:	1b52      	subs	r2, r2, r5
 8003866:	6122      	str	r2, [r4, #16]
 8003868:	f8cd a000 	str.w	sl, [sp]
 800386c:	464b      	mov	r3, r9
 800386e:	aa03      	add	r2, sp, #12
 8003870:	4621      	mov	r1, r4
 8003872:	4640      	mov	r0, r8
 8003874:	f7ff fee2 	bl	800363c <_printf_common>
 8003878:	3001      	adds	r0, #1
 800387a:	d14c      	bne.n	8003916 <_printf_i+0x1fe>
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	b004      	add	sp, #16
 8003882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003886:	4835      	ldr	r0, [pc, #212]	; (800395c <_printf_i+0x244>)
 8003888:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800388c:	6829      	ldr	r1, [r5, #0]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	f851 6b04 	ldr.w	r6, [r1], #4
 8003894:	6029      	str	r1, [r5, #0]
 8003896:	061d      	lsls	r5, r3, #24
 8003898:	d514      	bpl.n	80038c4 <_printf_i+0x1ac>
 800389a:	07df      	lsls	r7, r3, #31
 800389c:	bf44      	itt	mi
 800389e:	f043 0320 	orrmi.w	r3, r3, #32
 80038a2:	6023      	strmi	r3, [r4, #0]
 80038a4:	b91e      	cbnz	r6, 80038ae <_printf_i+0x196>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	f023 0320 	bic.w	r3, r3, #32
 80038ac:	6023      	str	r3, [r4, #0]
 80038ae:	2310      	movs	r3, #16
 80038b0:	e7b0      	b.n	8003814 <_printf_i+0xfc>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	f043 0320 	orr.w	r3, r3, #32
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	2378      	movs	r3, #120	; 0x78
 80038bc:	4828      	ldr	r0, [pc, #160]	; (8003960 <_printf_i+0x248>)
 80038be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038c2:	e7e3      	b.n	800388c <_printf_i+0x174>
 80038c4:	0659      	lsls	r1, r3, #25
 80038c6:	bf48      	it	mi
 80038c8:	b2b6      	uxthmi	r6, r6
 80038ca:	e7e6      	b.n	800389a <_printf_i+0x182>
 80038cc:	4615      	mov	r5, r2
 80038ce:	e7bb      	b.n	8003848 <_printf_i+0x130>
 80038d0:	682b      	ldr	r3, [r5, #0]
 80038d2:	6826      	ldr	r6, [r4, #0]
 80038d4:	6961      	ldr	r1, [r4, #20]
 80038d6:	1d18      	adds	r0, r3, #4
 80038d8:	6028      	str	r0, [r5, #0]
 80038da:	0635      	lsls	r5, r6, #24
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	d501      	bpl.n	80038e4 <_printf_i+0x1cc>
 80038e0:	6019      	str	r1, [r3, #0]
 80038e2:	e002      	b.n	80038ea <_printf_i+0x1d2>
 80038e4:	0670      	lsls	r0, r6, #25
 80038e6:	d5fb      	bpl.n	80038e0 <_printf_i+0x1c8>
 80038e8:	8019      	strh	r1, [r3, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	6123      	str	r3, [r4, #16]
 80038ee:	4615      	mov	r5, r2
 80038f0:	e7ba      	b.n	8003868 <_printf_i+0x150>
 80038f2:	682b      	ldr	r3, [r5, #0]
 80038f4:	1d1a      	adds	r2, r3, #4
 80038f6:	602a      	str	r2, [r5, #0]
 80038f8:	681d      	ldr	r5, [r3, #0]
 80038fa:	6862      	ldr	r2, [r4, #4]
 80038fc:	2100      	movs	r1, #0
 80038fe:	4628      	mov	r0, r5
 8003900:	f7fc fc76 	bl	80001f0 <memchr>
 8003904:	b108      	cbz	r0, 800390a <_printf_i+0x1f2>
 8003906:	1b40      	subs	r0, r0, r5
 8003908:	6060      	str	r0, [r4, #4]
 800390a:	6863      	ldr	r3, [r4, #4]
 800390c:	6123      	str	r3, [r4, #16]
 800390e:	2300      	movs	r3, #0
 8003910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003914:	e7a8      	b.n	8003868 <_printf_i+0x150>
 8003916:	6923      	ldr	r3, [r4, #16]
 8003918:	462a      	mov	r2, r5
 800391a:	4649      	mov	r1, r9
 800391c:	4640      	mov	r0, r8
 800391e:	47d0      	blx	sl
 8003920:	3001      	adds	r0, #1
 8003922:	d0ab      	beq.n	800387c <_printf_i+0x164>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	079b      	lsls	r3, r3, #30
 8003928:	d413      	bmi.n	8003952 <_printf_i+0x23a>
 800392a:	68e0      	ldr	r0, [r4, #12]
 800392c:	9b03      	ldr	r3, [sp, #12]
 800392e:	4298      	cmp	r0, r3
 8003930:	bfb8      	it	lt
 8003932:	4618      	movlt	r0, r3
 8003934:	e7a4      	b.n	8003880 <_printf_i+0x168>
 8003936:	2301      	movs	r3, #1
 8003938:	4632      	mov	r2, r6
 800393a:	4649      	mov	r1, r9
 800393c:	4640      	mov	r0, r8
 800393e:	47d0      	blx	sl
 8003940:	3001      	adds	r0, #1
 8003942:	d09b      	beq.n	800387c <_printf_i+0x164>
 8003944:	3501      	adds	r5, #1
 8003946:	68e3      	ldr	r3, [r4, #12]
 8003948:	9903      	ldr	r1, [sp, #12]
 800394a:	1a5b      	subs	r3, r3, r1
 800394c:	42ab      	cmp	r3, r5
 800394e:	dcf2      	bgt.n	8003936 <_printf_i+0x21e>
 8003950:	e7eb      	b.n	800392a <_printf_i+0x212>
 8003952:	2500      	movs	r5, #0
 8003954:	f104 0619 	add.w	r6, r4, #25
 8003958:	e7f5      	b.n	8003946 <_printf_i+0x22e>
 800395a:	bf00      	nop
 800395c:	08003d4d 	.word	0x08003d4d
 8003960:	08003d5e 	.word	0x08003d5e

08003964 <memcpy>:
 8003964:	440a      	add	r2, r1
 8003966:	4291      	cmp	r1, r2
 8003968:	f100 33ff 	add.w	r3, r0, #4294967295
 800396c:	d100      	bne.n	8003970 <memcpy+0xc>
 800396e:	4770      	bx	lr
 8003970:	b510      	push	{r4, lr}
 8003972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800397a:	4291      	cmp	r1, r2
 800397c:	d1f9      	bne.n	8003972 <memcpy+0xe>
 800397e:	bd10      	pop	{r4, pc}

08003980 <memmove>:
 8003980:	4288      	cmp	r0, r1
 8003982:	b510      	push	{r4, lr}
 8003984:	eb01 0402 	add.w	r4, r1, r2
 8003988:	d902      	bls.n	8003990 <memmove+0x10>
 800398a:	4284      	cmp	r4, r0
 800398c:	4623      	mov	r3, r4
 800398e:	d807      	bhi.n	80039a0 <memmove+0x20>
 8003990:	1e43      	subs	r3, r0, #1
 8003992:	42a1      	cmp	r1, r4
 8003994:	d008      	beq.n	80039a8 <memmove+0x28>
 8003996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800399a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800399e:	e7f8      	b.n	8003992 <memmove+0x12>
 80039a0:	4402      	add	r2, r0
 80039a2:	4601      	mov	r1, r0
 80039a4:	428a      	cmp	r2, r1
 80039a6:	d100      	bne.n	80039aa <memmove+0x2a>
 80039a8:	bd10      	pop	{r4, pc}
 80039aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039b2:	e7f7      	b.n	80039a4 <memmove+0x24>

080039b4 <_free_r>:
 80039b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039b6:	2900      	cmp	r1, #0
 80039b8:	d044      	beq.n	8003a44 <_free_r+0x90>
 80039ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039be:	9001      	str	r0, [sp, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f1a1 0404 	sub.w	r4, r1, #4
 80039c6:	bfb8      	it	lt
 80039c8:	18e4      	addlt	r4, r4, r3
 80039ca:	f000 f913 	bl	8003bf4 <__malloc_lock>
 80039ce:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <_free_r+0x94>)
 80039d0:	9801      	ldr	r0, [sp, #4]
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	b933      	cbnz	r3, 80039e4 <_free_r+0x30>
 80039d6:	6063      	str	r3, [r4, #4]
 80039d8:	6014      	str	r4, [r2, #0]
 80039da:	b003      	add	sp, #12
 80039dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039e0:	f000 b90e 	b.w	8003c00 <__malloc_unlock>
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	d908      	bls.n	80039fa <_free_r+0x46>
 80039e8:	6825      	ldr	r5, [r4, #0]
 80039ea:	1961      	adds	r1, r4, r5
 80039ec:	428b      	cmp	r3, r1
 80039ee:	bf01      	itttt	eq
 80039f0:	6819      	ldreq	r1, [r3, #0]
 80039f2:	685b      	ldreq	r3, [r3, #4]
 80039f4:	1949      	addeq	r1, r1, r5
 80039f6:	6021      	streq	r1, [r4, #0]
 80039f8:	e7ed      	b.n	80039d6 <_free_r+0x22>
 80039fa:	461a      	mov	r2, r3
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	b10b      	cbz	r3, 8003a04 <_free_r+0x50>
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	d9fa      	bls.n	80039fa <_free_r+0x46>
 8003a04:	6811      	ldr	r1, [r2, #0]
 8003a06:	1855      	adds	r5, r2, r1
 8003a08:	42a5      	cmp	r5, r4
 8003a0a:	d10b      	bne.n	8003a24 <_free_r+0x70>
 8003a0c:	6824      	ldr	r4, [r4, #0]
 8003a0e:	4421      	add	r1, r4
 8003a10:	1854      	adds	r4, r2, r1
 8003a12:	42a3      	cmp	r3, r4
 8003a14:	6011      	str	r1, [r2, #0]
 8003a16:	d1e0      	bne.n	80039da <_free_r+0x26>
 8003a18:	681c      	ldr	r4, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	6053      	str	r3, [r2, #4]
 8003a1e:	4421      	add	r1, r4
 8003a20:	6011      	str	r1, [r2, #0]
 8003a22:	e7da      	b.n	80039da <_free_r+0x26>
 8003a24:	d902      	bls.n	8003a2c <_free_r+0x78>
 8003a26:	230c      	movs	r3, #12
 8003a28:	6003      	str	r3, [r0, #0]
 8003a2a:	e7d6      	b.n	80039da <_free_r+0x26>
 8003a2c:	6825      	ldr	r5, [r4, #0]
 8003a2e:	1961      	adds	r1, r4, r5
 8003a30:	428b      	cmp	r3, r1
 8003a32:	bf04      	itt	eq
 8003a34:	6819      	ldreq	r1, [r3, #0]
 8003a36:	685b      	ldreq	r3, [r3, #4]
 8003a38:	6063      	str	r3, [r4, #4]
 8003a3a:	bf04      	itt	eq
 8003a3c:	1949      	addeq	r1, r1, r5
 8003a3e:	6021      	streq	r1, [r4, #0]
 8003a40:	6054      	str	r4, [r2, #4]
 8003a42:	e7ca      	b.n	80039da <_free_r+0x26>
 8003a44:	b003      	add	sp, #12
 8003a46:	bd30      	pop	{r4, r5, pc}
 8003a48:	200001b0 	.word	0x200001b0

08003a4c <sbrk_aligned>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	4e0e      	ldr	r6, [pc, #56]	; (8003a88 <sbrk_aligned+0x3c>)
 8003a50:	460c      	mov	r4, r1
 8003a52:	6831      	ldr	r1, [r6, #0]
 8003a54:	4605      	mov	r5, r0
 8003a56:	b911      	cbnz	r1, 8003a5e <sbrk_aligned+0x12>
 8003a58:	f000 f8bc 	bl	8003bd4 <_sbrk_r>
 8003a5c:	6030      	str	r0, [r6, #0]
 8003a5e:	4621      	mov	r1, r4
 8003a60:	4628      	mov	r0, r5
 8003a62:	f000 f8b7 	bl	8003bd4 <_sbrk_r>
 8003a66:	1c43      	adds	r3, r0, #1
 8003a68:	d00a      	beq.n	8003a80 <sbrk_aligned+0x34>
 8003a6a:	1cc4      	adds	r4, r0, #3
 8003a6c:	f024 0403 	bic.w	r4, r4, #3
 8003a70:	42a0      	cmp	r0, r4
 8003a72:	d007      	beq.n	8003a84 <sbrk_aligned+0x38>
 8003a74:	1a21      	subs	r1, r4, r0
 8003a76:	4628      	mov	r0, r5
 8003a78:	f000 f8ac 	bl	8003bd4 <_sbrk_r>
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d101      	bne.n	8003a84 <sbrk_aligned+0x38>
 8003a80:	f04f 34ff 	mov.w	r4, #4294967295
 8003a84:	4620      	mov	r0, r4
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	200001b4 	.word	0x200001b4

08003a8c <_malloc_r>:
 8003a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a90:	1ccd      	adds	r5, r1, #3
 8003a92:	f025 0503 	bic.w	r5, r5, #3
 8003a96:	3508      	adds	r5, #8
 8003a98:	2d0c      	cmp	r5, #12
 8003a9a:	bf38      	it	cc
 8003a9c:	250c      	movcc	r5, #12
 8003a9e:	2d00      	cmp	r5, #0
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	db01      	blt.n	8003aa8 <_malloc_r+0x1c>
 8003aa4:	42a9      	cmp	r1, r5
 8003aa6:	d905      	bls.n	8003ab4 <_malloc_r+0x28>
 8003aa8:	230c      	movs	r3, #12
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	2600      	movs	r6, #0
 8003aae:	4630      	mov	r0, r6
 8003ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ab4:	4e2e      	ldr	r6, [pc, #184]	; (8003b70 <_malloc_r+0xe4>)
 8003ab6:	f000 f89d 	bl	8003bf4 <__malloc_lock>
 8003aba:	6833      	ldr	r3, [r6, #0]
 8003abc:	461c      	mov	r4, r3
 8003abe:	bb34      	cbnz	r4, 8003b0e <_malloc_r+0x82>
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	f7ff ffc2 	bl	8003a4c <sbrk_aligned>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	4604      	mov	r4, r0
 8003acc:	d14d      	bne.n	8003b6a <_malloc_r+0xde>
 8003ace:	6834      	ldr	r4, [r6, #0]
 8003ad0:	4626      	mov	r6, r4
 8003ad2:	2e00      	cmp	r6, #0
 8003ad4:	d140      	bne.n	8003b58 <_malloc_r+0xcc>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	4631      	mov	r1, r6
 8003ada:	4638      	mov	r0, r7
 8003adc:	eb04 0803 	add.w	r8, r4, r3
 8003ae0:	f000 f878 	bl	8003bd4 <_sbrk_r>
 8003ae4:	4580      	cmp	r8, r0
 8003ae6:	d13a      	bne.n	8003b5e <_malloc_r+0xd2>
 8003ae8:	6821      	ldr	r1, [r4, #0]
 8003aea:	3503      	adds	r5, #3
 8003aec:	1a6d      	subs	r5, r5, r1
 8003aee:	f025 0503 	bic.w	r5, r5, #3
 8003af2:	3508      	adds	r5, #8
 8003af4:	2d0c      	cmp	r5, #12
 8003af6:	bf38      	it	cc
 8003af8:	250c      	movcc	r5, #12
 8003afa:	4629      	mov	r1, r5
 8003afc:	4638      	mov	r0, r7
 8003afe:	f7ff ffa5 	bl	8003a4c <sbrk_aligned>
 8003b02:	3001      	adds	r0, #1
 8003b04:	d02b      	beq.n	8003b5e <_malloc_r+0xd2>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	442b      	add	r3, r5
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	e00e      	b.n	8003b2c <_malloc_r+0xa0>
 8003b0e:	6822      	ldr	r2, [r4, #0]
 8003b10:	1b52      	subs	r2, r2, r5
 8003b12:	d41e      	bmi.n	8003b52 <_malloc_r+0xc6>
 8003b14:	2a0b      	cmp	r2, #11
 8003b16:	d916      	bls.n	8003b46 <_malloc_r+0xba>
 8003b18:	1961      	adds	r1, r4, r5
 8003b1a:	42a3      	cmp	r3, r4
 8003b1c:	6025      	str	r5, [r4, #0]
 8003b1e:	bf18      	it	ne
 8003b20:	6059      	strne	r1, [r3, #4]
 8003b22:	6863      	ldr	r3, [r4, #4]
 8003b24:	bf08      	it	eq
 8003b26:	6031      	streq	r1, [r6, #0]
 8003b28:	5162      	str	r2, [r4, r5]
 8003b2a:	604b      	str	r3, [r1, #4]
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	f104 060b 	add.w	r6, r4, #11
 8003b32:	f000 f865 	bl	8003c00 <__malloc_unlock>
 8003b36:	f026 0607 	bic.w	r6, r6, #7
 8003b3a:	1d23      	adds	r3, r4, #4
 8003b3c:	1af2      	subs	r2, r6, r3
 8003b3e:	d0b6      	beq.n	8003aae <_malloc_r+0x22>
 8003b40:	1b9b      	subs	r3, r3, r6
 8003b42:	50a3      	str	r3, [r4, r2]
 8003b44:	e7b3      	b.n	8003aae <_malloc_r+0x22>
 8003b46:	6862      	ldr	r2, [r4, #4]
 8003b48:	42a3      	cmp	r3, r4
 8003b4a:	bf0c      	ite	eq
 8003b4c:	6032      	streq	r2, [r6, #0]
 8003b4e:	605a      	strne	r2, [r3, #4]
 8003b50:	e7ec      	b.n	8003b2c <_malloc_r+0xa0>
 8003b52:	4623      	mov	r3, r4
 8003b54:	6864      	ldr	r4, [r4, #4]
 8003b56:	e7b2      	b.n	8003abe <_malloc_r+0x32>
 8003b58:	4634      	mov	r4, r6
 8003b5a:	6876      	ldr	r6, [r6, #4]
 8003b5c:	e7b9      	b.n	8003ad2 <_malloc_r+0x46>
 8003b5e:	230c      	movs	r3, #12
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	4638      	mov	r0, r7
 8003b64:	f000 f84c 	bl	8003c00 <__malloc_unlock>
 8003b68:	e7a1      	b.n	8003aae <_malloc_r+0x22>
 8003b6a:	6025      	str	r5, [r4, #0]
 8003b6c:	e7de      	b.n	8003b2c <_malloc_r+0xa0>
 8003b6e:	bf00      	nop
 8003b70:	200001b0 	.word	0x200001b0

08003b74 <_realloc_r>:
 8003b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b78:	4680      	mov	r8, r0
 8003b7a:	4614      	mov	r4, r2
 8003b7c:	460e      	mov	r6, r1
 8003b7e:	b921      	cbnz	r1, 8003b8a <_realloc_r+0x16>
 8003b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b84:	4611      	mov	r1, r2
 8003b86:	f7ff bf81 	b.w	8003a8c <_malloc_r>
 8003b8a:	b92a      	cbnz	r2, 8003b98 <_realloc_r+0x24>
 8003b8c:	f7ff ff12 	bl	80039b4 <_free_r>
 8003b90:	4625      	mov	r5, r4
 8003b92:	4628      	mov	r0, r5
 8003b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b98:	f000 f838 	bl	8003c0c <_malloc_usable_size_r>
 8003b9c:	4284      	cmp	r4, r0
 8003b9e:	4607      	mov	r7, r0
 8003ba0:	d802      	bhi.n	8003ba8 <_realloc_r+0x34>
 8003ba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ba6:	d812      	bhi.n	8003bce <_realloc_r+0x5a>
 8003ba8:	4621      	mov	r1, r4
 8003baa:	4640      	mov	r0, r8
 8003bac:	f7ff ff6e 	bl	8003a8c <_malloc_r>
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d0ed      	beq.n	8003b92 <_realloc_r+0x1e>
 8003bb6:	42bc      	cmp	r4, r7
 8003bb8:	4622      	mov	r2, r4
 8003bba:	4631      	mov	r1, r6
 8003bbc:	bf28      	it	cs
 8003bbe:	463a      	movcs	r2, r7
 8003bc0:	f7ff fed0 	bl	8003964 <memcpy>
 8003bc4:	4631      	mov	r1, r6
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	f7ff fef4 	bl	80039b4 <_free_r>
 8003bcc:	e7e1      	b.n	8003b92 <_realloc_r+0x1e>
 8003bce:	4635      	mov	r5, r6
 8003bd0:	e7df      	b.n	8003b92 <_realloc_r+0x1e>
	...

08003bd4 <_sbrk_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4d06      	ldr	r5, [pc, #24]	; (8003bf0 <_sbrk_r+0x1c>)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	4604      	mov	r4, r0
 8003bdc:	4608      	mov	r0, r1
 8003bde:	602b      	str	r3, [r5, #0]
 8003be0:	f7fd f9fa 	bl	8000fd8 <_sbrk>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d102      	bne.n	8003bee <_sbrk_r+0x1a>
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	b103      	cbz	r3, 8003bee <_sbrk_r+0x1a>
 8003bec:	6023      	str	r3, [r4, #0]
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
 8003bf0:	200001b8 	.word	0x200001b8

08003bf4 <__malloc_lock>:
 8003bf4:	4801      	ldr	r0, [pc, #4]	; (8003bfc <__malloc_lock+0x8>)
 8003bf6:	f000 b811 	b.w	8003c1c <__retarget_lock_acquire_recursive>
 8003bfa:	bf00      	nop
 8003bfc:	200001bc 	.word	0x200001bc

08003c00 <__malloc_unlock>:
 8003c00:	4801      	ldr	r0, [pc, #4]	; (8003c08 <__malloc_unlock+0x8>)
 8003c02:	f000 b80c 	b.w	8003c1e <__retarget_lock_release_recursive>
 8003c06:	bf00      	nop
 8003c08:	200001bc 	.word	0x200001bc

08003c0c <_malloc_usable_size_r>:
 8003c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c10:	1f18      	subs	r0, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bfbc      	itt	lt
 8003c16:	580b      	ldrlt	r3, [r1, r0]
 8003c18:	18c0      	addlt	r0, r0, r3
 8003c1a:	4770      	bx	lr

08003c1c <__retarget_lock_acquire_recursive>:
 8003c1c:	4770      	bx	lr

08003c1e <__retarget_lock_release_recursive>:
 8003c1e:	4770      	bx	lr

08003c20 <_init>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	bf00      	nop
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr

08003c2c <_fini>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr
